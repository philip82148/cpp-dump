[dump] false
         => false, 
       0 => 0, 
       0.0
         => 0.000000, 
       '0' => '0', 
       (const char *)"0"
         => "0", 
       string{"0"}
         => "0", 
       string_view{"0"}
         => "0"
[dump] true => true, 
       3.14
         => 3.140000, 
       159265
         => 159265, 
       "This is a test string"
         => "This is a test string"
[dump] "This contains newline\nhere."
         => 
`This contains newline
here.`,
       R"(This contains ".)"
         => `This contains ".`,
       R"(This contains `.)"
         => "This contains `."
[dump] "\n\n\n\n"
         => 
`



`
[dump] (vector<int>{3, 1, 4})
         => [ 
           3, 
           1, 
           4
         ]
[dump] (vector<vector<int>>{{3}, {1, 4}, {1, 5, 9}})
         => [ 
           [ 3 ], 
           [ 1, 4 ], 
           [ 
             1, 
             5, 
             9
           ]
         ]
[dump] (vector<vector<vector<int>>>{{}, {{2, 6}}, {{5}, {3}, {5}}})
         => [ 
           [ ], 
           [ 
             [ 
               2, 
               6
             ]
           ], 
           [ 
             [ 5 ], 
             [ 3 ], 
             [ 5 ]
           ]
         ]
[dump] (vector<int>{3, 1, 4})
         => [ 
           3, 
           1, 
           4
         ],
       vec => [ 
         [ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
       ],
       (vector<vector<vector<int>>>{{{2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45}}})
         => [ 
           [ 
             [ 
               2, 
               4, 
               6, 
               7, 
               8, 
               9, 
               0, 
               1, 
               1, 
               1, 
               3, 
               45
             ]
           ]
         ]
[dump] (vector<int>{2, 3})
         => [ 2, 3 ],
       (vector<int>{3, 4})
         => [ 3, 4 ],
       (vector<int>{2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1})
         => [ 
           2, 
           4, 
           4, 
           5, 
           6, 
           4, 
           5, 
           2, 
           4, 
           5, 
           3, 
           5, 
           6, 
           7, 
           5, 
           6, 
           6, 
           6, 
           7, 
           7, 
           8, 
           1
         ]
[dump] (vector<int>{2, 3})
         => [ 2, 3 ],
       (vector<int>{3, 4})
         => [ 3, 4 ],
       (vector<vector<int>>{{2}, {4}, {4}, {5}, {6}})
         => [ 
           [ 2 ], 
           [ 4 ], 
           [ 4 ], 
           [ 5 ], 
           [ 6 ]
         ]
[dump] (vector{make_pair(1, 9), make_pair(3, 4), make_pair(5, 7)})
         => [ 
           ( 1, 9 ), 
           ( 3, 4 ), 
           ( 5, 7 )
         ]
[dump] c_style_array
         => [ 
           3, 
           1, 
           4, 
           1, 
           5, 
           9, 
           2, 
           6, 
           5, 
           3
         ]
[dump] vec => [ 
         [ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
       ]
[dump] [ 
         [ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
       ]
[dump] make_pair(8, 'a')
         => ( 8, 'a' )
[dump] make_tuple( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.9 )
         => (
           9,
           "This is another string.",
           "This is another string.",
           "This is another string.",
           "This is another string.",
           7.900000
         )
[dump] (map<double, string>{{3.2, "This is a pen."}, {3.8, "I have an apple."}})
         => { 
           3.200000: "This is a pen.", 
           3.800000: "I have an apple."
         }
[dump] (unordered_map<int, int>{{4, 6}, {2, 6}, {4, 3}})
         => { 
           2: 6, 
           4: 6
         }
[dump] multimap1
         => { 
           'a' (2): [ 
             10, 
             40
           ], 
           'b' (1): [ 
             20
           ], 
           'c' (1): [ 
             30
           ]
         }
[dump] unordered_multimap1
         => { 
           'b' (1): [ 
             20
           ], 
           'a' (2): [ 
             40, 
             10
           ], 
           'c' (1): [ 
             30
           ]
         }
[dump] (set{"A", "p", "p", "l", "e", " ", "P", "e", "n"})
         => { 
           "A", 
           "p", 
           "l", 
           "e", 
           " ", 
           "P", 
           "n"
         }
[dump] (unordered_set{3, 1, 4, 1, 5})
         => { 
           5, 
           4, 
           1, 
           3
         }
[dump] multiset1
         => { 
           1 (2), 
           3 (1), 
           4 (1)
         }
[dump] unordered_multiset1
         => { 
           4 (1), 
           1 (2), 
           3 (1)
         }
[dump] queue1
         => std::queue{
           front()= 1,
           size()= 5
         }
[dump] priority_queue1
         => std::priority_queue{
           top()= '5',
           size()= 5
         }
[dump] stack1
         => std::stack{
           top()= "5",
           size()= 5
         }
[dump] int_ptr
         => *65
[dump] *int_ptr
         => 65
[dump] void_ptr
         => 0x7ffd06586204, 
       char_ptr
         => "A"
[dump] nullptr
         => nullptr
[dump] shared_ptr1
         => *42, 
       weak_ptr1
         => *42, 
       unique_ptr1
         => *42, 
       c => *42
[dump] shared_ptr1
         => *3, 
       weak_ptr1
         => nullptr, 
       unique_ptr1
         => *42
[dump] class_a1
         => decltype(class_a1){ 
           int_a= 314159265, 
           long_b= 1, 
           get_a()= 314159265
         }
[dump] class_b1
         => class_b{ 
           static_long_a= 358979, 
           int_b= 1, 
           str= "This object has a pointer to itself.", 
           pointer= *class_b{ 
             static_long_a= 358979, 
             int_b= 1, 
             str= "This object has a pointer to itself.", 
             pointer= *class_b{ 
               static_long_a= 358979, 
               int_b= 1, 
               str= "This object has a pointer to itself.", 
               pointer= *class_b{ 
                 static_long_a= 358979, 
                 int_b= 1, 
                 str= "This object has a pointer to itself.", 
                 pointer= *class_b{ ... }
               }
             }
           }
         }
[dump] int_ptr
         => *65, 
       enum_a_s
         => enum_a::s, 
       enum_a_k
         => enum_a::k, 
       enum_a_l
         => enum_a::?
[dump] bitset1
         => 0b 00 1100 1010
[dump] optional
         => ?1
[dump] optional
         => std::nullopt
[dump] nullopt
         => std::nullopt
[dump] variant1
         => |""
[dump] variant1
         => |0
[dump] complex1
         => 0.000000 - 1.000000i ( abs= 1.000000, arg/pi= -0.500000 )
[dump] complex2
         => 10.000000 + 1.000000i ( abs= 10.049876, arg/pi= 0.031726 )
[dump] logic_error1
         => std::logic_error{
           what()= "This is a test error."
         },
       original_error1
         => {
           what()= "This is an original error."
         }
[dump] vec.begin()
         => *[ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
[dump] unsupported_enum
         => Unsupported Type
[dump] cpp_dump::es_style_t::no_es
         => cpp_dump::es_style_t::no_es,
       cpp_dump::es_style_t::by_syntax
         => cpp_dump::es_style_t::by_syntax,
       cpp_dump::es_value
         => cpp_dump::es_value_t{ 
           log= "\e[02m", 
           expression= "\e[34m", 
           bracket_by_depth= [ 
             "\e[33m", 
             "\e[35m", 
             "\e[36m"
           ], 
           reserved= "\e[36m", 
           character= "\e[32m", 
           op= "\e[02m", 
           identifier= "\e[36m", 
           member= "\e[36m", 
           unsupported= ""
         }
[dump] array50 => [ 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         ...
       ],
       map50 => { 
         0: 1, 
         1: 2, 
         2: 3, 
         3: 4, 
         4: 5, 
         5: 6, 
         6: 7, 
         7: 8, 
         8: 9, 
         9: 10, 
         ...
       },
       set50 => { 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         ...
       }
[dump] array50 => [ 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         ...
       ],
       map50 => { 
         0: 1, 
         1: 2, 
         2: 3, 
         3: 4, 
         4: 5, 
         5: 6, 
         6: 7, 
         7: 8, 
         8: 9, 
         9: 10, 
         10: 11, 
         11: 12, 
         12: 13, 
         13: 14, 
         14: 15, 
         15: 16, 
         16: 17, 
         17: 18, 
         18: 19, 
         19: 20, 
         20: 21, 
         21: 22, 
         22: 23, 
         23: 24, 
         24: 25, 
         25: 26, 
         26: 27, 
         27: 28, 
         28: 29, 
         29: 30, 
         30: 31, 
         31: 32, 
         32: 33, 
         33: 34, 
         34: 35, 
         35: 36, 
         36: 37, 
         37: 38, 
         38: 39, 
         39: 40, 
         ...
       },
       set50 => { 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         ...
       }
