[dump] false
         => false, 
       0 => 0, 
       0.0
         => 0.000000, 
       '0' => '0', 
       (const char *)"0"
         => "0", 
       string{"0"}
         => "0", 
       string_view{"0"}
         => "0"
[dump] true => true, 
       3.14
         => 3.140000, 
       159265
         => 159265, 
       "This is a test string"
         => "This is a test string"
[dump] "This contains newline\nhere."
         => 
`This contains newline
here.`,
       R"(This contains ".)"
         => `This contains ".`,
       R"(This contains `.)"
         => "This contains `."
[dump] "\n\n\n\n"
         => 
`



`
[dump] (vector<int>{3, 1, 4})
         => [ 
           3, 
           1, 
           4
         ]
[dump] (vector<vector<int>>{{3}, {1, 4}, {1, 5, 9}})
         => [ 
           [ 3 ], 
           [ 1, 4 ], 
           [ 
             1, 
             5, 
             9
           ]
         ]
[dump] (vector<vector<vector<int>>>{{}, {{2, 6}}, {{5}, {3}, {5}}})
         => [ 
           [ ], 
           [ 
             [ 
               2, 
               6
             ]
           ], 
           [ 
             [ 5 ], 
             [ 3 ], 
             [ 5 ]
           ]
         ]
[dump] (vector<int>{3, 1, 4})
         => [ 
           3, 
           1, 
           4
         ],
       vec => [ 
         [ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
       ],
       (vector<vector<vector<int>>>{{{2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45}}})
         => [ 
           [ 
             [ 
               2, 
               4, 
               6, 
               7, 
               8, 
               9, 
               0, 
               1, 
               1, 
               1, 
               3, 
               45
             ]
           ]
         ]
[dump] (vector<int>{2, 3})
         => [ 2, 3 ],
       (vector<int>{3, 4})
         => [ 3, 4 ],
       (vector<int>{2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1})
         => [ 
           2, 
           4, 
           4, 
           5, 
           6, 
           4, 
           5, 
           2, 
           4, 
           5, 
           3, 
           5, 
           6, 
           7, 
           5, 
           6, 
           6, 
           6, 
           7, 
           7, 
           8, 
           1
         ]
[dump] (vector<int>{2, 3})
         => [ 2, 3 ],
       (vector<int>{3, 4})
         => [ 3, 4 ],
       (vector<vector<int>>{{2}, {4}, {4}, {5}, {6}})
         => [ 
           [ 2 ], 
           [ 4 ], 
           [ 4 ], 
           [ 5 ], 
           [ 6 ]
         ]
[dump] (vector{make_pair(1, 9), make_pair(3, 4), make_pair(5, 7)})
         => [ 
           ( 1, 9 ), 
           ( 3, 4 ), 
           ( 5, 7 )
         ]
[dump] c_style_array
         => [ 
           3, 
           1, 
           4, 
           1, 
           5, 
           9, 
           2, 
           6, 
           5, 
           3, 
           3, 
           1, 
           4, 
           1, 
           5, 
           9, 
           2, 
           6, 
           5, 
           3, 
           3, 
           1, 
           4, 
           1, 
           5, 
           9, 
           2, 
           6, 
           5, 
           3, 
           3, 
           1, 
           4, 
           1, 
           5, 
           9, 
           2, 
           6, 
           5, 
           3
         ]
[dump] vec => [ 
         [ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
       ]
[dump] [ 
         [ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
       ]
[dump] [ 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3, 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3, 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3, 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3
       ],
       [ 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3, 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3, 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3, 
         3, 
         1, 
         4, 
         1, 
         5, 
         9, 
         2, 
         6, 
         5, 
         3
       ]
[dump] make_pair(8, 'a')
         => ( 8, 'a' )
[dump] make_tuple( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.9 )
         => (
           9,
           "This is another string.",
           "This is another string.",
           "This is another string.",
           "This is another string.",
           7.900000
         )
[dump] (map<double, string>{{3.2, "This is a pen."}, {3.8, "I have an apple."}})
         => { 
           3.200000: "This is a pen.", 
           3.800000: "I have an apple."
         }
[dump] multimap1
         => { 
           'a' (4): [ 
             10, 
             40, 
             12, 
             44
           ], 
           'b' (2): [ 
             20, 
             23
           ], 
           'c' (2): [ 
             30, 
             31
           ]
         }
[dump] (set<string>{"A", "p", "p", "l", "e", " ", "P", "e", "n"})
         => { 
           " ", 
           "A", 
           "P", 
           "e", 
           "l", 
           "n", 
           "p"
         }
[dump] multiset1
         => { 
           1 (2), 
           3 (1), 
           4 (1)
         }
[dump] queue1
         => std::queue{
           front()= 1,
           size()= 5
         }
[dump] priority_queue1
         => std::priority_queue{
           top()= '5',
           size()= 5
         }
[dump] stack1
         => std::stack{
           top()= "5",
           size()= 5
         }
[dump] int_ptr
         => *65
[dump] *int_ptr
         => 65
[dump] char_ptr
         => "A"
[dump] nullptr
         => nullptr
[dump] shared_ptr1
         => *42, 
       weak_ptr1
         => *42, 
       unique_ptr1
         => *42, 
       c => *42
[dump] shared_ptr1
         => *3, 
       weak_ptr1
         => nullptr, 
       unique_ptr1
         => *42
[dump] class_a1
         => decltype(class_a1){ 
           int_a= 314159265, 
           long_b= 1, 
           a_str()= "314159265"
         }
[dump] non_copyable_and_non_movable_class1
         => non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }, 
               ref= non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }, 
               ref= non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }, 
               ref= non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }, 
               ref= non_copyable_and_non_movable_class{ 
                 str_member= "This object has a pointer and reference_wrapper to itself.", 
                 pointer= *non_copyable_and_non_movable_class{ ... }, 
                 ref= non_copyable_and_non_movable_class{ ... }
               }
             }
           }
         }
[dump] int_ptr
         => *65, 
       enum_a_s
         => enum_a::s, 
       enum_a_k
         => enum_a::k, 
       enum_a_l
         => enum_a::?
[dump] bitset2
         => 0b 01, 
       bitset3
         => 0b 010, 
       bitset4
         => 0b 0011, 
       bitset5
         => 0b 0 0100, 
       bitset7
         => 0b 011 1010, 
       bitset8
         => 0b 0011 1010, 
       bitset9
         => 0b 0 1100 1010, 
       bitset10
         => 0b 00 1100 1010
[dump] optional1
         => ?1
[dump] optional1
         => std::nullopt
[dump] nullopt
         => std::nullopt
[dump] variant1
         => |""
[dump] variant1
         => |0
[dump] complex1
         => 0.000000 - 1.000000i ( abs= 1.000000, arg/pi= -0.500000 )
[dump] complex2
         => 10.000000 + 1.000000i ( abs= 10.049876, arg/pi= 0.031726 )
[dump] logic_error1
         => std::logic_error{
           what()= "This is a test error."
         },
       original_error1
         => {
           what()= "This is an original error."
         }
[dump] vec.begin()
         => *[ 
           2, 
           4, 
           6, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           7, 
           8, 
           9, 
           0, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1, 
           1
         ]
[dump] unsupported_enum
         => Unsupported Type
[dump] cpp_dump::es_style_t::no_es
         => cpp_dump::es_style_t::no_es,
       cpp_dump::es_style_t::by_syntax
         => cpp_dump::es_style_t::by_syntax,
       cpp_dump::es_value
         => cpp_dump::es_value_t{ 
           log= "\e[02m", 
           expression= "\e[36m", 
           reserved= "", 
           character= "", 
           op= "\e[02m", 
           identifier= "\e[32m", 
           member= "\e[36m", 
           unsupported= "\e[31m", 
           bracket_by_depth= [ 
             "\e[02m"
           ]
         }
[dump] int_style(16) << 10000u
         => 00 00 27 10 _16, 
       int_style(16) << 10000l
         => 00 00 27 10 _16, 
       int_style(16) << 10000ul
         => 00 00 27 10 _16, 
       int_style(16) << 10000ll
         => 00 00 27 10 _16, 
       int_style(16) << 10000ull
         => 00 00 27 10 _16
[dump] array50 => [ 
         0, 
         1, 
         ...
       ],
       map50 => { 
         0: 1, 
         1: 2, 
         ...
       },
       set50 => { 
         0, 
         1, 
         ...
       }
[dump] show_front() << array50
         => [ 
           0, 
           1, 
           ...
         ],
       show_front() << map50
         => { 
           0: 1, 
           1: 2, 
           ...
         },
       show_front() << set50
         => { 
           0, 
           1, 
           ...
         }
[dump] show_middle() << array50
         => [ 
           ..., 
           24, 
           25, 
           ...
         ],
       show_middle() << map50
         => { 
           ..., 
           24: 25, 
           25: 26, 
           ...
         },
       show_middle() << set50
         => { 
           ..., 
           24, 
           25, 
           ...
         }
[dump] show_back() << array50
         => [ 
           ..., 
           48, 
           49
         ],
       show_back() << map50
         => { 
           ..., 
           48: 49, 
           49: 50
         },
       show_back() << set50
         => { 
           ..., 
           48, 
           49
         }
[dump] show_both_ends() << array50
         => [ 
           0, 
           ..., 
           49
         ],
       show_both_ends() << map50
         => { 
           0: 1, 
           ..., 
           49: 50
         },
       show_both_ends() << set50
         => { 
           0, 
           ..., 
           49
         }
[dump] show_front(10) << array50
         => [ 
           0, 
           1, 
           2, 
           3, 
           4, 
           5, 
           6, 
           7, 
           8, 
           9, 
           ...
         ],
       show_front(10) << map50
         => { 
           0: 1, 
           1: 2, 
           2: 3, 
           3: 4, 
           4: 5, 
           5: 6, 
           6: 7, 
           7: 8, 
           8: 9, 
           9: 10, 
           ...
         },
       show_front(10) << set50
         => { 
           0, 
           1, 
           2, 
           3, 
           4, 
           5, 
           6, 
           7, 
           8, 
           9, 
           ...
         }
[dump] show_back(10) << array50
         => [ 
           ..., 
           40, 
           41, 
           42, 
           43, 
           44, 
           45, 
           46, 
           47, 
           48, 
           49
         ],
       show_back(10) << map50
         => { 
           ..., 
           40: 41, 
           41: 42, 
           42: 43, 
           43: 44, 
           44: 45, 
           45: 46, 
           46: 47, 
           47: 48, 
           48: 49, 
           49: 50
         },
       show_back(10) << set50
         => { 
           ..., 
           40, 
           41, 
           42, 
           43, 
           44, 
           45, 
           46, 
           47, 
           48, 
           49
         }
[dump] show_middle(10) << array50
         => [ 
           ..., 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           ...
         ],
       show_middle(10) << map50
         => { 
           ..., 
           20: 21, 
           21: 22, 
           22: 23, 
           23: 24, 
           24: 25, 
           25: 26, 
           26: 27, 
           27: 28, 
           28: 29, 
           29: 30, 
           ...
         },
       show_middle(10) << set50
         => { 
           ..., 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           ...
         }
[dump] show_both_ends(10) << array50
         => [ 
           0, 
           1, 
           2, 
           3, 
           4, 
           ..., 
           45, 
           46, 
           47, 
           48, 
           49
         ],
       show_both_ends(10) << map50
         => { 
           0: 1, 
           1: 2, 
           2: 3, 
           3: 4, 
           4: 5, 
           ..., 
           45: 46, 
           46: 47, 
           47: 48, 
           48: 49, 
           49: 50
         },
       show_both_ends(10) << set50
         => { 
           0, 
           1, 
           2, 
           3, 
           4, 
           ..., 
           45, 
           46, 
           47, 
           48, 
           49
         }
[dump] show_front(40) << array50
         => [ 
           0, 
           1, 
           2, 
           3, 
           4, 
           5, 
           6, 
           7, 
           8, 
           9, 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           ...
         ],
       show_front(40) << map50
         => { 
           0: 1, 
           1: 2, 
           2: 3, 
           3: 4, 
           4: 5, 
           5: 6, 
           6: 7, 
           7: 8, 
           8: 9, 
           9: 10, 
           10: 11, 
           11: 12, 
           12: 13, 
           13: 14, 
           14: 15, 
           15: 16, 
           16: 17, 
           17: 18, 
           18: 19, 
           19: 20, 
           20: 21, 
           21: 22, 
           22: 23, 
           23: 24, 
           24: 25, 
           25: 26, 
           26: 27, 
           27: 28, 
           28: 29, 
           29: 30, 
           30: 31, 
           31: 32, 
           32: 33, 
           33: 34, 
           34: 35, 
           35: 36, 
           36: 37, 
           37: 38, 
           38: 39, 
           39: 40, 
           ...
         },
       show_front(40) << set50
         => { 
           0, 
           1, 
           2, 
           3, 
           4, 
           5, 
           6, 
           7, 
           8, 
           9, 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           ...
         }
[dump] show_middle(40) << array50
         => [ 
           ..., 
           5, 
           6, 
           7, 
           8, 
           9, 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           40, 
           41, 
           42, 
           43, 
           44, 
           ...
         ],
       show_middle(40) << map50
         => { 
           ..., 
           5: 6, 
           6: 7, 
           7: 8, 
           8: 9, 
           9: 10, 
           10: 11, 
           11: 12, 
           12: 13, 
           13: 14, 
           14: 15, 
           15: 16, 
           16: 17, 
           17: 18, 
           18: 19, 
           19: 20, 
           20: 21, 
           21: 22, 
           22: 23, 
           23: 24, 
           24: 25, 
           25: 26, 
           26: 27, 
           27: 28, 
           28: 29, 
           29: 30, 
           30: 31, 
           31: 32, 
           32: 33, 
           33: 34, 
           34: 35, 
           35: 36, 
           36: 37, 
           37: 38, 
           38: 39, 
           39: 40, 
           40: 41, 
           41: 42, 
           42: 43, 
           43: 44, 
           44: 45, 
           ...
         },
       show_middle(40) << set50
         => { 
           ..., 
           5, 
           6, 
           7, 
           8, 
           9, 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           40, 
           41, 
           42, 
           43, 
           44, 
           ...
         }
[dump] show_back(40) << array50
         => [ 
           ..., 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           40, 
           41, 
           42, 
           43, 
           44, 
           45, 
           46, 
           47, 
           48, 
           49
         ],
       show_back(40) << map50
         => { 
           ..., 
           10: 11, 
           11: 12, 
           12: 13, 
           13: 14, 
           14: 15, 
           15: 16, 
           16: 17, 
           17: 18, 
           18: 19, 
           19: 20, 
           20: 21, 
           21: 22, 
           22: 23, 
           23: 24, 
           24: 25, 
           25: 26, 
           26: 27, 
           27: 28, 
           28: 29, 
           29: 30, 
           30: 31, 
           31: 32, 
           32: 33, 
           33: 34, 
           34: 35, 
           35: 36, 
           36: 37, 
           37: 38, 
           38: 39, 
           39: 40, 
           40: 41, 
           41: 42, 
           42: 43, 
           43: 44, 
           44: 45, 
           45: 46, 
           46: 47, 
           47: 48, 
           48: 49, 
           49: 50
         },
       show_back(40) << set50
         => { 
           ..., 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           20, 
           21, 
           22, 
           23, 
           24, 
           25, 
           26, 
           27, 
           28, 
           29, 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           40, 
           41, 
           42, 
           43, 
           44, 
           45, 
           46, 
           47, 
           48, 
           49
         }
[dump] show_both_ends(40) << array50
         => [ 
           0, 
           1, 
           2, 
           3, 
           4, 
           5, 
           6, 
           7, 
           8, 
           9, 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           ..., 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           40, 
           41, 
           42, 
           43, 
           44, 
           45, 
           46, 
           47, 
           48, 
           49
         ],
       show_both_ends(40) << map50
         => { 
           0: 1, 
           1: 2, 
           2: 3, 
           3: 4, 
           4: 5, 
           5: 6, 
           6: 7, 
           7: 8, 
           8: 9, 
           9: 10, 
           10: 11, 
           11: 12, 
           12: 13, 
           13: 14, 
           14: 15, 
           15: 16, 
           16: 17, 
           17: 18, 
           18: 19, 
           19: 20, 
           ..., 
           30: 31, 
           31: 32, 
           32: 33, 
           33: 34, 
           34: 35, 
           35: 36, 
           36: 37, 
           37: 38, 
           38: 39, 
           39: 40, 
           40: 41, 
           41: 42, 
           42: 43, 
           43: 44, 
           44: 45, 
           45: 46, 
           46: 47, 
           47: 48, 
           48: 49, 
           49: 50
         },
       show_both_ends(40) << set50
         => { 
           0, 
           1, 
           2, 
           3, 
           4, 
           5, 
           6, 
           7, 
           8, 
           9, 
           10, 
           11, 
           12, 
           13, 
           14, 
           15, 
           16, 
           17, 
           18, 
           19, 
           ..., 
           30, 
           31, 
           32, 
           33, 
           34, 
           35, 
           36, 
           37, 
           38, 
           39, 
           40, 
           41, 
           42, 
           43, 
           44, 
           45, 
           46, 
           47, 
           48, 
           49
         }
[dump] vec2 => [ 
         [ 
           [ 1 ]
         ], 
         [ 
           [ 2, 6 ]
         ], 
         [ 
           [ 
             5, 
             6, 
             7
           ], 
           [ 
             3, 
             6, 
             8, 
             9
           ], 
           [ 
             5, 
             7, 
             8, 
             10, 
             11
           ]
         ]
       ],
       show_back(2) << show_both_ends(1) << show_back(2) << vec2
         => [ 
           ..., 
           [ 
             [ 
               2, 
               6
             ]
           ], 
           [ 
             [ 
               ..., 
               6, 
               7
             ], 
             ...
           ]
         ]
[dump] vec2 => [ 
         [ 
           [ 1 ]
         ], 
         [ 
           [ 2, 6 ]
         ], 
         [ 
           [ 
             5, 
             6, 
             7
           ], 
           [ 
             3, 
             6, 
             8, 
             9
           ], 
           [ 
             5, 
             7, 
             8, 
             10, 
             11
           ]
         ]
       ],
       show_both_ends(2) << show_both_ends(2) << show_both_ends(2) << vec2
         => [ 
           [ 
             [ 1 ]
           ], 
           ..., 
           [ 
             [ 
               5, 
               ..., 
               7
             ], 
             ..., 
             [ 
               5, 
               ..., 
               11
             ]
           ]
         ]
[dump] multimap1
         => { 
           'a' (4): [ 
             10, 
             40, 
             12, 
             44
           ], 
           'b' (2): [ 
             20, 
             23
           ], 
           'c' (2): [ 
             30, 
             31
           ]
         },
       show_both_ends(2) << show_both_ends(2) << multimap1
         => { 
           'a' (4): [ 
             10, 
             ..., 
             44
           ], 
           ..., 
           'c' (2): [ 
             30, 
             31
           ]
         }
[dump] multiset1
         => { 
           1 (2), 
           3 (1), 
           4 (1)
         },
       show_middle(1) << show_back(1) << multiset1
         => { 
           ..., 
           3 (1), 
           ...
         }
[dump] show_front(2) << map_key_and_value(show_back(2), show_front(2)) << multimap2
         => { 
           [ 
             ..., 
             4, 
             2
           ] (3): [ 
             [ 
               11, 
               22, 
               11, 
               22
             ], 
             [ 
               14, 
               21, 
               11, 
               22
             ], 
             ...
           ], 
           [ 
             ..., 
             4, 
             0
           ] (1): [ 
             [ 
               21, 
               5, 
               2, 
               -5
             ]
           ], 
           ...
         }
[dump] int_style(12, 3, 3) << show_front(2) << int_style(2, 0, 0) << map_key_and_value(int_style(16, 3, 3) << show_back(2), show_front(2)) << multimap2
         => { 
           [ 
             ..., 
             004 _16, 
             002 _16
           ] (3): [ 
             [ 
               1011 _2, 
               10110 _2, 
               1011 _2, 
               10110 _2
             ], 
             [ 
               1110 _2, 
               10101 _2, 
               1011 _2, 
               10110 _2
             ], 
             ...
           ], 
           [ 
             ..., 
             004 _16, 
             000 _16
           ] (1): [ 
             [ 
               10101 _2, 
               101 _2, 
               10 _2, 
               -5
             ]
           ], 
           ...
         }
[dump] int_style(12, 3, 3) << int_style(8, 3, 3) << map_key_and_value(int_style(16, 3, 3) << show_back(2), show_front(2)) << multimap2
         => { 
           [ 
             001 _8, 
             002 _8, 
             004 _8, 
             002 _8
           ] (3): [ 
             [ 
               013 _8, 
               026 _8, 
               013 _8, 
               026 _8
             ], 
             [ 
               016 _8, 
               025 _8, 
               013 _8, 
               026 _8
             ], 
             [ 
               000 _8, 
               005 _8, 
               031 _8
             ]
           ], 
           [ 
             003 _8, 
             004 _8, 
             000 _8
           ] (1): [ 
             [ 
               025 _8, 
               005 _8, 
               002 _8, 
               -5
             ]
           ], 
           [ 
             005 _8, 
             006 _8, 
             007 _8, 
             010 _8
           ] (1): [ 
             [ 
               016 _8, 
               -2
             ]
           ]
         }
[dump] show_front(1) << map_value( int_style(8, 3, 3) << show_middle(1) << int_style(16, 3, 3) << show_middle(2) << int_style(5, 3, 3) ) << multimap2
         => { 
           [ 
             1, 
             2, 
             4, 
             2
           ] (3): [ 
             ..., 
             [ 
               ..., 
               015 _16, 
               00b _16, 
               ...
             ], 
             ...
           ], 
           ...
         }
[dump] i => 0, 
       int_style(i) << 0x10000
         => 65536
[dump] i => 1, 
       int_style(i) << 0x10000
         => 65536
[dump] i => 2, 
       int_style(i) << 0x10000
         => 1 00 00 00 00 00 00 00 00 _2
[dump] i => 3, 
       int_style(i) << 0x10000
         => 1 00 22 22 00 21 _3
[dump] i => 4, 
       int_style(i) << 0x10000
         => 1 00 00 00 00 _4
[dump] i => 5, 
       int_style(i) << 0x10000
         => 04 04 41 21 _5
[dump] i => 6, 
       int_style(i) << 0x10000
         => 01 22 32 24 _6
[dump] i => 7, 
       int_style(i) << 0x10000
         => 00 36 20 32 _7
[dump] i => 8, 
       int_style(i) << 0x10000
         => 00 20 00 00 _8
[dump] i => 9, 
       int_style(i) << 0x10000
         => 00 10 88 07 _9
[dump] i => 10, 
       int_style(i) << 0x10000
         => 00 06 55 36
[dump] i => 11, 
       int_style(i) << 0x10000
         => 00 04 52 69 _11
[dump] i => 12, 
       int_style(i) << 0x10000
         => 00 03 1b 14 _12
[dump] i => 13, 
       int_style(i) << 0x10000
         => 00 02 3a a3 _13
[dump] i => 14, 
       int_style(i) << 0x10000
         => 00 01 9c 52 _14
[dump] i => 15, 
       int_style(i) << 0x10000
         => 00 01 46 41 _15
[dump] i => 16, 
       int_style(i) << 0x10000
         => 00 01 00 00 _16
[dump] vec3 => [ 
         [ 
           1, 
           20, 
           4
         ], 
         [ 
           -2, 
           0, 
           -10
         ]
       ],
       int_style(10, 2, 0, false, true) << vec3
         => [ 
           [ 
              01, 
              20, 
              04
           ], 
           [ 
             -02, 
              00, 
             -10
           ]
         ],
       int_style10(2) << vec3
         => [ 
           [ 
               1, 
              20, 
               4
           ], 
           [ 
             - 2, 
               0, 
             -10
           ]
         ]
[dump] 0000 0001
[dump]  0000 0002
[dump] -0000 0003
[dump]         1
[dump]          2
[dump] -        3
[dump] 0 0000 0004
[dump]  0 0000 0005
[dump] -0 0000 0006
[dump]           4
[dump]            5
[dump] -          6
[dump] 000 0007
[dump]  000 0008
[dump] -000 0009
[dump]        7
[dump]         8
[dump] -       9
[dump] 1
[dump]  2
[dump] -3
[dump] 1
[dump]  2
[dump] -3
[dump] 004
[dump]  005
[dump] -006
[dump]   4
[dump]    5
[dump] -  6
[dump] 0007
[dump]  0008
[dump] -0009
[dump]    7
[dump]     8
[dump] -   9
[dump] 0 0000
[dump]  0 0001
[dump] -0 0002
[dump]      0
[dump]       1
[dump] -     2
[dump] 1 0000
[dump]  2 0000
[dump] -3 0000
[dump]   4000
[dump]    5000
[dump] -  6000
[dump]    700
[dump]     800
[dump] -   900
[dump] 1 0000
[dump]  2 0000
[dump] -3 0000
[dump] 4000
[dump]  5000
[dump] -6000
[dump] 700
[dump]  800
[dump] -900
[dump] 10
[dump]  20
[dump] -30
[dump]  4
[dump]   5
[dump] - 6
[dump] 83 _16
[dump]  84 _16
[dump] -74 _16
[dump] -85 _16
[dump] 86 _16
[dump]  87 _16
[dump] -77 _16
[dump]  88 _16
[dump]   89 _16
[dump]    8a _16
[dump] -  7a _16
[dump]  0 8b _16
[dump]    8c _16
[dump]     8d _16
[dump] -   7d _16
[dump]  00 8e _16
[dump]      8f _16
[dump]       80 _16
[dump] -     71 _16
[dump]  0 00 82 _16
[dump] 0 0000
[dump]      0
[dump] 0 0000 _16
[dump]      0 _16
[dump]  0 0000
[dump]       0
[dump]  0 0000 _16
[dump]       0 _16
[dump] 00000
[dump]     0
[dump] 00000 _16
[dump]     0 _16
[dump]  00000
[dump]      0
[dump]  00000 _16
[dump]      0 _16
[dump] show_front(2) << show_middle(1) << show_back(2) << show_both_ends(1) << non_copyable_and_non_movable_class1
         => non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ ... }, 
             ref= non_copyable_and_non_movable_class{ ... }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ ... }, 
             ref= non_copyable_and_non_movable_class{ ... }
           }
         }
[dump] non_copyable_and_non_movable_class_container1
         => [ 
           non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ ... }, 
             ref= non_copyable_and_non_movable_class{ ... }
           }, 
           non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ ... }, 
             ref= non_copyable_and_non_movable_class{ ... }
           }
         ]
[dump] show_front(1) << non_copyable_and_non_movable_class_container1
         => [ 
           non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ ... }, 
             ref= non_copyable_and_non_movable_class{ ... }
           }, 
           ...
         ]
[dump] container_of_non_copyable_non_const_iterator1
         => [ 
           "This iterator is non-copyable and doesn't support const.", 
           "This iterator is non-copyable and doesn't support const."
         ]
[dump] unsupported_container_of_supported_container_a1
         => Unsupported Type
[dump] unsupported_container_of_supported_container_b1
         => Unsupported Type
[dump] unsupported_non_const_class1
         => Unsupported Type
