[dump] false => false, 0 => 0, 0.0 => 0.000000, '0' => '0', (const char *)"0" => "0", string{"0"} => "0", string_view{"0"} => "0"
[dump] true => true, 3.14 => 3.140000, 159265 => 159265, "This is a test string" => "This is a test string"
[dump] "This contains newline\nhere." => 
`This contains newline
here.`,
       R"(This contains ".)" => `This contains ".`,
       R"(This contains `.)" => "This contains `."
[dump] "\n\n\n\n" => 
`



`
[dump] (vector<int>{3, 1, 4}) => [ 3, 1, 4 ]
[dump] (vector<vector<int>>{{3}, {1, 4}, {1, 5, 9}}) => [ 
         [ 3 ], 
         [ 1, 4 ], 
         [ 1, 5, 9 ]
       ]
[dump] (vector<vector<vector<int>>>{{}, {{2, 6}}, {{5}, {3}, {5}}}) => [ 
         [ ], 
         [ 
           [ 2, 6 ]
         ], 
         [ 
           [ 5 ], 
           [ 3 ], 
           [ 5 ]
         ]
       ]
[dump] (vector<int>{3, 1, 4}) => [ 3, 1, 4 ],
       vec => [ 
         [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
       ],
       (vector<vector<vector<int>>>{{{2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45}}}) => [ 
         [ 
           [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45 ]
         ]
       ]
[dump] (vector<int>{2, 3}) => [ 2, 3 ], (vector<int>{3, 4}) => [ 3, 4 ], 
       (vector<int>{2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1}) => [ 2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1 ]
[dump] (vector<int>{2, 3}) => [ 2, 3 ],
       (vector<int>{3, 4}) => [ 3, 4 ],
       (vector<vector<int>>{{2}, {4}, {4}, {5}, {6}}) => [ 
         [ 2 ], 
         [ 4 ], 
         [ 4 ], 
         [ 5 ], 
         [ 6 ]
       ]
[dump] (vector{make_pair(1, 9), make_pair(3, 4), make_pair(5, 7)}) => [ 
         ( 1, 9 ), 
         ( 3, 4 ), 
         ( 5, 7 )
       ]
[dump] c_style_array => [ 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3 ]
[dump] vec => [ 
         [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
       ]
[dump] [ 
         [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
       ]
[dump] [ 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3 ], 
       [ 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3 ]
[dump] make_pair(8, 'a') => ( 8, 'a' )
[dump] make_tuple( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.9 )
         => ( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.900000 )
[dump] (map<double, string>{{3.2, "This is a pen."}, {3.8, "I have an apple."}}) => { 3.200000: "This is a pen.", 3.800000: "I have an apple." }
[dump] (unordered_map<int, int>{{4, 6}, {2, 6}, {4, 3}}) => { 2: 6, 4: 6 }
[dump] multimap1 => { 
         'a' (4): [ 10, 40, 12, 44 ], 
         'b' (2): [ 20, 23 ], 
         'c' (2): [ 30, 31 ]
       }
[dump] unordered_multimap1 => { 
         'b' (1): [ 20 ], 
         'a' (2): [ 40, 10 ], 
         'c' (1): [ 30 ]
       }
[dump] (set{"A", "p", "p", "l", "e", " ", "P", "e", "n"}) => { "A", "p", "l", "e", " ", "P", "n" }
[dump] (unordered_set{3, 1, 4, 1, 5}) => { 5, 4, 1, 3 }
[dump] multiset1 => { 1 (2), 3 (1), 4 (1) }
[dump] unordered_multiset1 => { 4 (1), 1 (2), 3 (1) }
[dump] queue1 => std::queue{ front()= 1, size()= 5 }
[dump] priority_queue1 => std::priority_queue{ top()= '5', size()= 5 }
[dump] stack1 => std::stack{ top()= "5", size()= 5 }
[dump] int_ptr => *65
[dump] *int_ptr => 65
[dump] void_ptr => 0x7ffd06586204, char_ptr => "A"
[dump] nullptr => nullptr
[dump] shared_ptr1 => *42, weak_ptr1 => *42, unique_ptr1 => *42, c => *42
[dump] shared_ptr1 => *3, weak_ptr1 => nullptr, unique_ptr1 => *42
[dump] class_a1 => decltype(class_a1){ int_a= 314159265, long_b= 1, a_str()= "314159265" }
[dump] non_copyable_and_non_movable_class1 => non_copyable_and_non_movable_class{ 
         str_member= "This object has a pointer and reference_wrapper to itself.", 
         pointer= *non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }, 
         ref= non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }
       }
[dump] int_ptr => *65, enum_a_s => enum_a::s, enum_a_k => enum_a::k, enum_a_l => enum_a::?
[dump] bitset1 => 0b 00 1100 1010
[dump] optional1 => ?1
[dump] optional1 => std::nullopt
[dump] nullopt => std::nullopt
[dump] variant1 => |""
[dump] variant1 => |0
[dump] complex1 => 0.000000 - 1.000000i ( abs= 1.000000, arg/pi= -0.500000 )
[dump] complex2 => 10.000000 + 1.000000i ( abs= 10.049876, arg/pi= 0.031726 )
[dump] logic_error1 => std::logic_error{ what()= "This is a test error." }, original_error1 => { what()= "This is an original error." }
[dump] vec.begin() => *[ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
[dump] unsupported_enum => Unsupported Type
[dump] cpp_dump::es_style_t::no_es => cpp_dump::es_style_t::no_es,
       cpp_dump::es_style_t::by_syntax => cpp_dump::es_style_t::by_syntax,
       cpp_dump::es_value => cpp_dump::es_value_t{ 
         log= "\e[02m", 
         expression= "\e[36m", 
         reserved= "", 
         character= "", 
         op= "\e[02m", 
         identifier= "\e[32m", 
         member= "\e[36m", 
         unsupported= "\e[31m", 
         bracket_by_depth= [ "\e[02m" ]
       }
[dump] array50 => [ 0, 1, ... ], map50 => { 0: 1, 1: 2, ... }, set50 => { 0, 1, ... }
[dump] keep_front() << array50 => [ 0, 1, ... ], keep_front() << map50 => { 0: 1, 1: 2, ... }, keep_front() << set50 => { 0, 1, ... }
[dump] keep_middle() << array50 => [ ..., 24, 25, ... ], keep_middle() << map50 => { ..., 24: 25, 25: 26, ... }, keep_middle() << set50 => { ..., 24, 25, ... }
[dump] keep_back() << array50 => [ ..., 48, 49 ], keep_back() << map50 => { ..., 48: 49, 49: 50 }, keep_back() << set50 => { ..., 48, 49 }
[dump] keep_both_ends() << array50 => [ 0, ..., 49 ], keep_both_ends() << map50 => { 0: 1, ..., 49: 50 }, keep_both_ends() << set50 => { 0, ..., 49 }
[dump] keep_front(10) << array50 => [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... ], 
       keep_front(10) << map50 => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, ... }, 
       keep_front(10) << set50 => { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... }
[dump] keep_back(10) << array50 => [ ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 ], 
       keep_back(10) << map50 => { ..., 40: 41, 41: 42, 42: 43, 43: 44, 44: 45, 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       keep_back(10) << set50 => { ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
[dump] keep_middle(10) << array50 => [ ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... ], 
       keep_middle(10) << map50 => { ..., 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, ... }, 
       keep_middle(10) << set50 => { ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... }
[dump] keep_both_ends(10) << array50 => [ 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 ], 
       keep_both_ends(10) << map50 => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, ..., 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       keep_both_ends(10) << set50 => { 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 }
[dump] keep_front(40) << array50 => [ 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         ...
       ],
       keep_front(40) << map50 => { 
         0: 1, 
         1: 2, 
         2: 3, 
         3: 4, 
         4: 5, 
         5: 6, 
         6: 7, 
         7: 8, 
         8: 9, 
         9: 10, 
         10: 11, 
         11: 12, 
         12: 13, 
         13: 14, 
         14: 15, 
         15: 16, 
         16: 17, 
         17: 18, 
         18: 19, 
         19: 20, 
         20: 21, 
         21: 22, 
         22: 23, 
         23: 24, 
         24: 25, 
         25: 26, 
         26: 27, 
         27: 28, 
         28: 29, 
         29: 30, 
         30: 31, 
         31: 32, 
         32: 33, 
         33: 34, 
         34: 35, 
         35: 36, 
         36: 37, 
         37: 38, 
         38: 39, 
         39: 40, 
         ...
       },
       keep_front(40) << set50 => { 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         ...
       }
[dump] keep_middle(40) << array50 => [ 
         ..., 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         40, 
         41, 
         42, 
         43, 
         44, 
         ...
       ],
       keep_middle(40) << map50 => { 
         ..., 
         5: 6, 
         6: 7, 
         7: 8, 
         8: 9, 
         9: 10, 
         10: 11, 
         11: 12, 
         12: 13, 
         13: 14, 
         14: 15, 
         15: 16, 
         16: 17, 
         17: 18, 
         18: 19, 
         19: 20, 
         20: 21, 
         21: 22, 
         22: 23, 
         23: 24, 
         24: 25, 
         25: 26, 
         26: 27, 
         27: 28, 
         28: 29, 
         29: 30, 
         30: 31, 
         31: 32, 
         32: 33, 
         33: 34, 
         34: 35, 
         35: 36, 
         36: 37, 
         37: 38, 
         38: 39, 
         39: 40, 
         40: 41, 
         41: 42, 
         42: 43, 
         43: 44, 
         44: 45, 
         ...
       },
       keep_middle(40) << set50 => { 
         ..., 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         40, 
         41, 
         42, 
         43, 
         44, 
         ...
       }
[dump] keep_back(40) << array50 => [ 
         ..., 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         40, 
         41, 
         42, 
         43, 
         44, 
         45, 
         46, 
         47, 
         48, 
         49
       ],
       keep_back(40) << map50 => { 
         ..., 
         10: 11, 
         11: 12, 
         12: 13, 
         13: 14, 
         14: 15, 
         15: 16, 
         16: 17, 
         17: 18, 
         18: 19, 
         19: 20, 
         20: 21, 
         21: 22, 
         22: 23, 
         23: 24, 
         24: 25, 
         25: 26, 
         26: 27, 
         27: 28, 
         28: 29, 
         29: 30, 
         30: 31, 
         31: 32, 
         32: 33, 
         33: 34, 
         34: 35, 
         35: 36, 
         36: 37, 
         37: 38, 
         38: 39, 
         39: 40, 
         40: 41, 
         41: 42, 
         42: 43, 
         43: 44, 
         44: 45, 
         45: 46, 
         46: 47, 
         47: 48, 
         48: 49, 
         49: 50
       },
       keep_back(40) << set50 => { 
         ..., 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         20, 
         21, 
         22, 
         23, 
         24, 
         25, 
         26, 
         27, 
         28, 
         29, 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         40, 
         41, 
         42, 
         43, 
         44, 
         45, 
         46, 
         47, 
         48, 
         49
       }
[dump] keep_both_ends(40) << array50 => [ 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         ..., 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         40, 
         41, 
         42, 
         43, 
         44, 
         45, 
         46, 
         47, 
         48, 
         49
       ],
       keep_both_ends(40) << map50 => { 
         0: 1, 
         1: 2, 
         2: 3, 
         3: 4, 
         4: 5, 
         5: 6, 
         6: 7, 
         7: 8, 
         8: 9, 
         9: 10, 
         10: 11, 
         11: 12, 
         12: 13, 
         13: 14, 
         14: 15, 
         15: 16, 
         16: 17, 
         17: 18, 
         18: 19, 
         19: 20, 
         ..., 
         30: 31, 
         31: 32, 
         32: 33, 
         33: 34, 
         34: 35, 
         35: 36, 
         36: 37, 
         37: 38, 
         38: 39, 
         39: 40, 
         40: 41, 
         41: 42, 
         42: 43, 
         43: 44, 
         44: 45, 
         45: 46, 
         46: 47, 
         47: 48, 
         48: 49, 
         49: 50
       },
       keep_both_ends(40) << set50 => { 
         0, 
         1, 
         2, 
         3, 
         4, 
         5, 
         6, 
         7, 
         8, 
         9, 
         10, 
         11, 
         12, 
         13, 
         14, 
         15, 
         16, 
         17, 
         18, 
         19, 
         ..., 
         30, 
         31, 
         32, 
         33, 
         34, 
         35, 
         36, 
         37, 
         38, 
         39, 
         40, 
         41, 
         42, 
         43, 
         44, 
         45, 
         46, 
         47, 
         48, 
         49
       }
[dump] vec2 => [ 
         [ 
           [ 1 ]
         ], 
         [ 
           [ 2, 6 ]
         ], 
         [ 
           [ 5, 6, 7 ], 
           [ 3, 6, 8, 9 ], 
           [ 5, 7, 8, 10, 11 ]
         ]
       ],
       keep_back(2) << keep_both_ends(1) << keep_back(2) << vec2 => [ 
         ..., 
         [ 
           [ 2, 6 ]
         ], 
         [ 
           [ ..., 6, 7 ], 
           ...
         ]
       ]
[dump] vec2 => [ 
         [ 
           [ 1 ]
         ], 
         [ 
           [ 2, 6 ]
         ], 
         [ 
           [ 5, 6, 7 ], 
           [ 3, 6, 8, 9 ], 
           [ 5, 7, 8, 10, 11 ]
         ]
       ],
       keep_both_ends(2) << keep_both_ends(2) << keep_both_ends(2) << vec2 => [ 
         [ 
           [ 1 ]
         ], 
         ..., 
         [ 
           [ 5, ..., 7 ], 
           ..., 
           [ 5, ..., 11 ]
         ]
       ]
[dump] multimap1 => { 
         'a' (4): [ 10, 40, 12, 44 ], 
         'b' (2): [ 20, 23 ], 
         'c' (2): [ 30, 31 ]
       },
       keep_both_ends(2) << keep_both_ends(2) << multimap1 => { 
         'a' (4): [ 10, ..., 44 ], 
         ..., 
         'c' (2): [ 30, 31 ]
       }
[dump] multiset1 => { 1 (2), 3 (1), 4 (1) }, keep_middle(1) << keep_back(1) << multiset1 => { ..., 3 (1), ... }
[dump] keep_front() << map_key_and_value(keep_back(2), keep_front(2)) << multimap2 => { 
         [ 1, 2 ] (3): [ 3, 5, ... ], 
         [ ..., 4, 0 ] (1): [ 8 ], 
         [ ..., 7, 8 ] (1): [ 7 ]
       }
[dump] keep_front(2) << keep_middle(1) << keep_back(2) << keep_both_ends(1) << non_copyable_and_non_movable_class1 => non_copyable_and_non_movable_class{ 
         str_member= "This object has a pointer and reference_wrapper to itself.", 
         pointer= *non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }, 
         ref= non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }
       }
[dump] array_of_non_copyable_and_non_movable_class => [ 
         non_copyable_and_non_movable_class{ 
           str_member= "value", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "value", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "value", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }, 
         non_copyable_and_non_movable_class{ 
           str_member= "value", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "value", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "value", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }
       ]
[dump] keep_front(1) << array_of_non_copyable_and_non_movable_class => [ 
         non_copyable_and_non_movable_class{ 
           str_member= "value", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "value", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "value", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "value", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }, 
         ...
       ]
[dump] non_copyable_and_non_movable_class_container1 => [ 
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }, 
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }
       ]
[dump] keep_front(1) << non_copyable_and_non_movable_class_container1 => [ 
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This is non_copyable_and_non_movable_class.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This is non_copyable_and_non_movable_class.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }, 
         ...
       ]
