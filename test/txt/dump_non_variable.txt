[dump] cpp_dump::max_iteration_count == 100 => true
[dump] false => false, 0 => 0, 0.0 => 0.000000, '0' => '0', (const char *)"0" => "0", string{"0"} => "0", string_view{"0"} => "0"
[dump] (signed char)0 => 0, (unsigned char)0 => 0, 0u => 0, 0l => 0, 0ul => 0, 0ll => 0, 0ull => 0, 0.0f => 0.000000, 0.0l => 0.000000
[dump] true => true, 3.14 => 3.140000, 159265 => 159265, "This is a test string" => "This is a test string"
[dump] (signed char)3 => 3, (unsigned char)5 => 5, 8u => 8, 9l => 9, 7ul => 7, 9ll => 9, 3ull => 3, 2.38f => 2.380000, 4.6l => 4.600000
[dump] "This contains newline\nhere." => 
`This contains newline
here.`,
       R"(This contains ".)" => `This contains ".`,
       R"(This contains `.)" => "This contains `."
[dump] "\n\n\n\n" => 
`



`
[dump] volatile_int => 3589, volatile_double => 79.323000
[dump] (vector<int>{3, 1, 4}) => [ 3, 1, 4 ]
[dump] (vector<vector<int>>{{3}, {1, 4}, {1, 5, 9}}) => [
         [ 3 ],
         [ 1, 4 ],
         [ 1, 5, 9 ]
       ]
[dump] (vector<vector<vector<int>>>{{}, {{2, 6}}, {{5}, {3}, {5}}}) => [
         [ ],
         [
           [ 2, 6 ]
         ],
         [
           [ 5 ],
           [ 3 ],
           [ 5 ]
         ]
       ]
[dump] (vector<int>{3, 1, 4}) => [ 3, 1, 4 ],
       vec => [
         [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
       ],
       (vector<vector<vector<int>>>{{{2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45}}}) => [
         [
           [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45 ]
         ]
       ]
[dump] (vector<int>{2, 3}) => [ 2, 3 ], (vector<int>{3, 4}) => [ 3, 4 ], 
       (vector<int>{2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1}) => [ 2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1 ]
[dump] (vector<int>{2, 3}) => [ 2, 3 ],
       (vector<int>{3, 4}) => [ 3, 4 ],
       (vector<vector<int>>{{2}, {4}, {4}, {5}, {6}}) => [
         [ 2 ],
         [ 4 ],
         [ 4 ],
         [ 5 ],
         [ 6 ]
       ]
[dump] (vector{make_pair(1, 9), make_pair(3, 4), make_pair(5, 7)}) => [
         ( 1, 9 ),
         ( 3, 4 ),
         ( 5, 7 )
       ]
[dump] c_style_array => [ 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3 ]
[dump] vec => [
         [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
       ]
[dump] make_pair(8, 'a') => ( 8, 'a' )
[dump] make_tuple( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.9 )
         => ( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.900000 )
[dump] (map<double, string>{{3.2, "This is a pen."}, {3.8, "I have an apple."}}) => { 3.200000: "This is a pen.", 3.800000: "I have an apple." }
[dump] multimap1 => {
         'a' (4): [ 10, 40, 12, 44 ],
         'b' (2): [ 20, 23 ],
         'c' (2): [ 30, 31 ]
       }
[dump] (set<string>{"A", "p", "p", "l", "e", " ", "P", "e", "n"}) => { " ", "A", "P", "e", "l", "n", "p" }
[dump] multiset1 => { 1 (2), 3 (1), 4 (1) }
[dump] queue1 => std::queue{ size()= 0 }
[dump] queue1 => std::queue{ front()= 3, size()= 1 }
[dump] queue1 => std::queue{ front()= 3, back()= 2, size()= 2 }
[dump] queue1 => std::queue{ front()= 3, back()= 1, size()= 3 }
[dump] priority_queue1 => std::priority_queue{ size()= 0 }
[dump] priority_queue1 => std::priority_queue{ top()= '3', size()= 1 }
[dump] priority_queue1 => std::priority_queue{ top()= '3', size()= 2 }
[dump] priority_queue1 => std::priority_queue{ top()= '3', size()= 3 }
[dump] stack1 => std::stack{ size()= 0 }
[dump] stack1 => std::stack{ top()= "3", size()= 1 }
[dump] stack1 => std::stack{ top()= "2", size()= 2 }
[dump] stack1 => std::stack{ top()= "1", size()= 3 }
[dump] int_ptr => *65
[dump] *int_ptr => 65
[dump] char_ptr => "A"
[dump] nullptr => nullptr
[dump] shared_ptr1 => *42, weak_ptr1 => *42, unique_ptr1 => *42, c => *42
[dump] shared_ptr1 => *3, weak_ptr1 => nullptr, unique_ptr1 => *42
[dump] class_a1 => decltype(class_a1){ int_a= 314159265, long_b= 1, a_str()= "314159265" }
[dump] non_copyable_and_non_movable_class1 => non_copyable_and_non_movable_class{ 
         str_member= "This object has a pointer and reference_wrapper to itself.", 
         pointer= *non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *..., 
             ref= non_copyable_and_non_movable_class{ ... }
           }
         }, 
         ref= non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *..., 
             ref= non_copyable_and_non_movable_class{ ... }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ ... }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *..., 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }
       }
[dump] int_ptr => *65, enum_a_s => enum_a::s, enum_a_k => enum_a::k, enum_a_l => enum_a::?
[dump] bitset2 => 0b 01, bitset3 => 0b 010, bitset4 => 0b 0011, bitset5 => 0b 0 0100, bitset7 => 0b 011 1010, bitset8 => 0b 0011 1010, bitset9 => 0b 0 1100 1010, 
       bitset10 => 0b 00 1100 1010
[dump] optional1 => ?1
[dump] optional1 => std::nullopt
[dump] nullopt => std::nullopt
[dump] variant1 => |""
[dump] variant1 => |0
[dump] complex1 => 0.000000 - 1.000000i ( abs= 1.000000, arg/pi= -0.500000 )
[dump] complex2 => 10.000000 + 1.000000i ( abs= 10.049876, arg/pi= 0.031726 )
[dump] logic_error1 => std::logic_error{ what()= "This is a test error." }
[dump] vec.begin() => Unsupported Type
[dump] vec.begin() => *[ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
[dump] ostream_able_class_a_1 => ostream_able_class_a
[dump] unsupported_class1 => Unsupported Type
[dump] main => Unsupported Type, &main => Unsupported Type, &unsupported_class::k => Unsupported Type, &unsupported_class::str => Unsupported Type
[dump] setw(5) => Unsupported Type, boolalpha => Unsupported Type
[dump] cp::es_style_t::no_es => cpp_dump::es_style_t::no_es,
       cp::es_style_t::original => cpp_dump::es_style_t::original,
       cp::es_style_t::by_syntax => cpp_dump::es_style_t::by_syntax,
       cp::es_value => cpp_dump::es_value_t{ 
         log= "\e[02m", 
         expression= "\e[36m", 
         reserved= "", 
         character= "", 
         op= "\e[02m", 
         identifier= "\e[32m", 
         member= "\e[36m", 
         unsupported= "\e[31m", 
         bracket_by_depth= [ "\e[02m" ], 
         class_op= "\e[02m", 
         member_op= "\e[02m", 
         number_op= ""
       }
[dump] cp::cont_indent_style_t::minimal => cpp_dump::cont_indent_style_t::minimal, 
       cp::cont_indent_style_t::when_nested => cpp_dump::cont_indent_style_t::when_nested, 
       cp::cont_indent_style_t::when_non_tuples_nested => cpp_dump::cont_indent_style_t::when_non_tuples_nested, 
       cp::cont_indent_style_t::always => cpp_dump::cont_indent_style_t::always, cp::cont_indent_style => cpp_dump::cont_indent_style_t::when_nested
[dump] array50 => [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ... ], 
       map50
         => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, 10: 11, 11: 12, 12: 13, 13: 14, 14: 15, 15: 16, 16: 17, 17: 18, 18: 19, 19: 20, ... }, 
       set50 => { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, ... }
[dump] cp::front(10) << array50 => [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... ], 
       cp::front(10) << map50 => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, ... }, 
       cp::front(10) << set50 => { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... }
[dump] array50 | cp::front(10) => [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... ], 
       map50 | cp::front(10) => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, ... }, 
       set50 | cp::front(10) => { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... }
[dump] cp::back(10) << array50 => [ ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 ], 
       cp::back(10) << map50 => { ..., 40: 41, 41: 42, 42: 43, 43: 44, 44: 45, 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       cp::back(10) << set50 => { ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
[dump] array50 | cp::back(10) => [ ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 ], 
       map50 | cp::back(10) => { ..., 40: 41, 41: 42, 42: 43, 43: 44, 44: 45, 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       set50 | cp::back(10) => { ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
[dump] cp::middle(10) << array50 => [ ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... ], 
       cp::middle(10) << map50 => { ..., 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, ... }, 
       cp::middle(10) << set50 => { ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... }
[dump] array50 | cp::middle(10) => [ ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... ], 
       map50 | cp::middle(10) => { ..., 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, ... }, 
       set50 | cp::middle(10) => { ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... }
[dump] cp::both_ends(5) << array50 => [ 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 ], 
       cp::both_ends(5) << map50 => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, ..., 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       cp::both_ends(5) << set50 => { 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 }
[dump] array50 | cp::both_ends(5) => [ 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 ], 
       map50 | cp::both_ends(5) => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, ..., 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       set50 | cp::both_ends(5) => { 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 }
[dump] vec3d => [
         [
           [ 1 ]
         ],
         [
           [ 2, 6 ]
         ],
         [
           [ 5, 6, 7 ],
           [ 3, 6, 8, 9 ],
           [ 5, 7, 8, 10, 11 ]
         ]
       ]
[dump] cp::back(2) << vec3d => [
         ...,
         [
           [ 2, 6 ]
         ],
         [
           [ 5, 6, 7 ],
           [ 3, 6, 8, 9 ],
           [ 5, 7, 8, 10, 11 ]
         ]
       ]
[dump] vec3d | cp::back(2) => [
         ...,
         [
           [ 2, 6 ]
         ],
         [
           [ 5, 6, 7 ],
           [ 3, 6, 8, 9 ],
           [ 5, 7, 8, 10, 11 ]
         ]
       ]
[dump] vec3d | cp::back(2) | cp::both_ends(1) => [
         ...,
         [
           [ 2, 6 ]
         ],
         [
           [ 5, 6, 7 ],
           ...,
           [ 5, 7, 8, 10, 11 ]
         ]
       ]
[dump] cp::back(2) << cp::both_ends(1) << cp::middle(1) << vec3d => [
         ...,
         [
           [ 2, ... ]
         ],
         [
           [ ..., 6, ... ],
           ...,
           [ ..., 8, ... ]
         ]
       ]
[dump] cp::index() << cp::back(2) << cp::both_ends(1) << cp::middle(1) << vec3d => [
         ...,
         1: [
           0: [ 0: 2, ... ]
         ],
         2: [
           0: [ ..., 1: 6, ... ],
           ...,
           2: [ ..., 2: 8, ... ]
         ]
       ]
[dump] vec3d | cp::back(2) | cp::both_ends(1) | cp::middle(1) | cp::index() => [
         ...,
         1: [
           0: [ 0: 2, ... ]
         ],
         2: [
           0: [ ..., 1: 6, ... ],
           ...,
           2: [ ..., 2: 8, ... ]
         ]
       ]
[dump] multimap1 => {
         'a' (4): [ 10, 40, 12, 44 ],
         'b' (2): [ 20, 23 ],
         'c' (2): [ 30, 31 ]
       }
[dump] cp::both_ends(1) << cp::both_ends(1) << multimap1 => {
         'a' (4): [ 10, ..., 44 ],
         ...,
         'c' (2): [ 30, 31 ]
       }
[dump] multimap1 | cp::both_ends(1) | cp::both_ends(1) => {
         'a' (4): [ 10, ..., 44 ],
         ...,
         'c' (2): [ 30, 31 ]
       }
[dump] cp::both_ends(1) << cp::both_ends(1) << cp::index() << multimap1 => {
         'a' (4): [ 0: 10, ..., 3: 44 ],
         ...,
         'c' (2): [ 0: 30, 1: 31 ]
       }
[dump] multimap1 | cp::both_ends(1) | cp::both_ends(1) | cp::index() => {
         'a' (4): [ 0: 10, ..., 3: 44 ],
         ...,
         'c' (2): [ 0: 30, 1: 31 ]
       }
[dump] cp::middle(1) << cp::back(1) << multiset1 => { ..., 3 (1), ... }
[dump] multiset1 | cp::middle(1) | cp::back(1) => { ..., 3 (1), ... }
[dump] cp::front(2) << cp::map_kv(cp::back(2), cp::front(2)) << multimap2 => {
         [ ..., 4, 2 ] (3): [
           [ 11, 22, 11, 22 ],
           [ 14, 21, 11, 22 ],
           ...
         ],
         [ ..., 4, 0 ] (1): [
           [ 21, 5, 2, -5 ]
         ],
         ...
       }
[dump] multimap2 | cp::front(2) | cp::map_kv(cp::back(2), cp::front(2)) => {
         [ ..., 4, 2 ] (3): [
           [ 11, 22, 11, 22 ],
           [ 14, 21, 11, 22 ],
           ...
         ],
         [ ..., 4, 0 ] (1): [
           [ 21, 5, 2, -5 ]
         ],
         ...
       }
[dump] cp::front(2) << cp::bin(0) << cp::map_kv(cp::hex(3, 3) << cp::back(2), cp::front(2)) << multimap2 => {
         [ ...,  0x 004,  0x 002 ] (3): [
           [ 0b1011, 0b10110, 0b1011, 0b10110 ],
           [ 0b1110, 0b10101, 0b1011, 0b10110 ],
           ...
         ],
         [ ...,  0x 004,  0x 000 ] (1): [
           [ 0b10101, 0b101, 0b10, -0b101 ]
         ],
         ...
       }
[dump] multimap2 | cp::front(2) | cp::bin(0) | cp::map_kv(cp::hex(3, 3) | cp::back(2), cp::front(2)) => {
         [ ...,  0x 004,  0x 002 ] (3): [
           [ 0b1011, 0b10110, 0b1011, 0b10110 ],
           [ 0b1110, 0b10101, 0b1011, 0b10110 ],
           ...
         ],
         [ ...,  0x 004,  0x 000 ] (1): [
           [ 0b10101, 0b101, 0b10, -0b101 ]
         ],
         ...
       }
[dump] cp::oct(3, 3) << cp::map_kv(cp::hex(3, 3) << cp::back(2), cp::front(2)) << multimap2 => {
         [  0o 001,  0o 002,  0o 004,  0o 002 ] (3): [
           [  0o 013,  0o 026,  0o 013,  0o 026 ],
           [  0o 016,  0o 025,  0o 013,  0o 026 ],
           [  0o 000,  0o 005,  0o 031 ]
         ],
         [  0o 003,  0o 004,  0o 000 ] (1): [
           [  0o 025,  0o 005,  0o 002, -0o 005 ]
         ],
         [  0o 005,  0o 006,  0o 007,  0o 010 ] (1): [
           [  0o 016, -0o 002 ]
         ]
       }
[dump] multimap2 | cp::oct(3, 3) | cp::map_kv(cp::hex(3, 3) | cp::back(2), cp::front(2)) => {
         [  0o 001,  0o 002,  0o 004,  0o 002 ] (3): [
           [  0o 013,  0o 026,  0o 013,  0o 026 ],
           [  0o 016,  0o 025,  0o 013,  0o 026 ],
           [  0o 000,  0o 005,  0o 031 ]
         ],
         [  0o 003,  0o 004,  0o 000 ] (1): [
           [  0o 025,  0o 005,  0o 002, -0o 005 ]
         ],
         [  0o 005,  0o 006,  0o 007,  0o 010 ] (1): [
           [  0o 016, -0o 002 ]
         ]
       }
[dump] cp::front(1) << cp::map_v(cp::oct(3, 3) << cp::middle(1) << cp::hex(3, 3) << cp::middle(2)) << multimap2 => {
         [ 1, 2, 4, 2 ] (3): [
           ...,
           [ ...,  0x 015,  0x 00B, ... ],
           ...
         ],
         ...
       }
[dump] multimap2 | cp::front(1) | cp::map_v(cp::oct(3, 3) | cp::middle(1) | cp::hex(3, 3) | cp::middle(2)) => {
         [ 1, 2, 4, 2 ] (3): [
           ...,
           [ ...,  0x 015,  0x 00B, ... ],
           ...
         ],
         ...
       }
[dump] multimap2 | cp::index() | cp::front(1) | cp::map_v(cp::oct(3, 3) | cp::middle(1) | cp::hex(3, 3) | cp::middle(2)) => {
         [ 0: 1, 1: 2, 2: 4, 3: 2 ] (3): [
           ...,
           1: [ ..., 1:  0x 015, 2:  0x 00B, ... ],
           ...
         ],
         ...
       }
[dump] multimap2 | cp::front(1) | cp::index() | cp::map_v(cp::oct(3, 3) | cp::middle(1) | cp::hex(3, 3) | cp::middle(2)) => {
         [ 0: 1, 1: 2, 2: 4, 3: 2 ] (3): [
           ...,
           1: [ ..., 1:  0x 015, 2:  0x 00B, ... ],
           ...
         ],
         ...
       }
[dump] multimap2 | cp::front(1) | cp::map_v(cp::oct(3, 3) | cp::middle(1) | cp::hex(3, 3) | cp::middle(2) | cp::index()) => {
         [ 1, 2, 4, 2 ] (3): [
           ...,
           1: [ ..., 1:  0x 015, 2:  0x 00B, ... ],
           ...
         ],
         ...
       }
[dump] base => 0, cp::int_style(base, -1, 2) << 0x10000 => 65536
[dump] base => 1, cp::int_style(base, -1, 2) << 0x10000 => 65536
[dump] base => 2, cp::int_style(base, -1, 2) << 0x10000 =>  0b 00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
[dump] base => 8, cp::int_style(base, -1, 2) << 0x10000 =>  0o 0 00 00 20 00 00
[dump] base => 10, cp::int_style(base, -1, 2) << 0x10000 =>  00 00 06 55 36
[dump] base => 16, cp::int_style(base, -1, 2) << 0x10000 =>  0x 00 01 00 00
[dump] base => 17, cp::int_style(base, -1, 2) << 0x10000 => 65536
[dump] vec2d | cp::index() => [
         0: [ 0: -1, 1: 2, 2: 3, 3: -4, 4: 5, 5: 6, 6: 7, 7: -8 ],
         1: [ 0: 9, 1: -10, 2: 11, 3: -12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | cp::front(3) | cp::index() => [
         0: [ 0: -1, 1: 2, 2: 3, 3: -4, 4: 5, 5: 6, 6: 7, 7: -8 ],
         1: [ 0: 9, 1: -10, 2: 11, 3: -12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         ...
       ]
[dump] vec2d | cp::back(3) | cp::index() => [
         ...,
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | cp::middle(3) | cp::index() => [
         ...,
         1: [ 0: 9, 1: -10, 2: 11, 3: -12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: -16 ],
         ...
       ]
[dump] vec2d | cp::both_ends(1) | cp::index() => [
         0: [ 0: -1, 1: 2, 2: 3, 3: -4, 4: 5, 5: 6, 6: 7, 7: -8 ],
         ...,
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | cp::front() | cp::front(3) | cp::index() => [
         0: [ 0: -1, 1: 2, 2: 3, ... ],
         1: [ 0: 9, 1: -10, 2: 11, ... ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | cp::front() | cp::back(3) | cp::index() => [
         0: [ ..., 5: 6, 6: 7, 7: -8 ],
         1: [ ..., 2: 11, 3: -12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | cp::front() | cp::middle(3) | cp::index() => [
         0: [ ..., 2: 3, 3: -4, 4: 5, ... ],
         1: [ ..., 1: -10, 2: 11, 3: -12, ... ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | cp::front() | cp::both_ends(1) | cp::index() => [
         0: [ 0: -1, ..., 7: -8 ],
         1: [ 0: 9, ..., 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] cp::dec(2) << vec2d => [
         [  -1,   2,   3,  -4,   5,   6,   7,  -8 ],
         [   9, -10,  11, -12,  13 ],
         [  14,  15 ],
         [  15, -16 ],
         [ -17,  18 ],
         [  19,  20 ]
       ]
[dump] vec2d | cp::dec(2, 0, false) => [
         [ -01,  02,  03, -04,  05,  06,  07, -08 ],
         [  09, -10,  11, -12,  13 ],
         [  14,  15 ],
         [  15, -16 ],
         [ -17,  18 ],
         [  19,  20 ]
       ]
[dump] cp::dec(8, 4, false) << 1u => 0000 0001
[dump] cp::dec(8, 4, true_) << 1u =>         1
[dump] cp::dec(8, 4, false_) << 2 =>  0000 0002
[dump] cp::dec(8, 4, true_a) << 2 =>          2
[dump] cp::dec(8, 4, false) << -3 => -0000 0003
[dump] cp::dec(8, 4, true_) << -3 =>         -3
[dump] cp::dec(9, 4, false) << 4u => 0 0000 0004
[dump] cp::dec(9, 4, true_) << 4u =>           4
[dump] cp::dec(9, 4, false_) << 5 =>  0 0000 0005
[dump] cp::dec(9, 4, true_a) << 5 =>            5
[dump] cp::dec(9, 4, false) << -6 => -0 0000 0006
[dump] cp::dec(9, 4, true_) << -6 =>           -6
[dump] cp::dec(7, 4, false) << 7u => 000 0007
[dump] cp::dec(7, 4, true_) << 7u =>        7
[dump] cp::dec(7, 4, false_) << 8 =>  000 0008
[dump] cp::dec(7, 4, true_a) << 8 =>         8
[dump] cp::dec(7, 4, false) << -9 => -000 0009
[dump] cp::dec(7, 4, true_) << -9 =>        -9
[dump] cp::dec(4, 4, false) << 7u => 0007
[dump] cp::dec(4, 4, true_) << 7u =>    7
[dump] cp::dec(4, 4, false_) << 8 =>  0008
[dump] cp::dec(4, 4, true_a) << 8 =>     8
[dump] cp::dec(4, 4, false) << -9 => -0009
[dump] cp::dec(4, 4, true_) << -9 =>    -9
[dump] cp::dec(5, 4, false) << 0u => 0 0000
[dump] cp::dec(5, 4, true_) << 0u =>      0
[dump] cp::dec(5, 4, false_) << 1 =>  0 0001
[dump] cp::dec(5, 4, true_a) << 1 =>       1
[dump] cp::dec(5, 4, false) << -2 => -0 0002
[dump] cp::dec(5, 4, true_) << -2 =>      -2
[dump] cp::dec(5, 4, true) << 10000u => 1 0000
[dump] cp::dec(5, 4, true_) << 4000u =>   4000
[dump] cp::dec(5, 4, true_a) << 700u =>    700
[dump] cp::dec(5, 4, true_) << 20000 =>  2 0000
[dump] cp::dec(5, 4, true) << -30000 => -3 0000
[dump] cp::dec(5, 4, true_a) << 5000 =>    5000
[dump] cp::dec(5, 4, true_) << -6000 =>  - 6000
[dump] cp::dec(5, 4, true_aa) << 800 =>     800
[dump] cp::dec(5, 4, true_a) << -900 =>    -900
[dump] cp::dec(0, 4, true) << 10000u => 1 0000
[dump] cp::dec(0, 4, true_) << 4000u => 4000
[dump] cp::dec(0, 4, true_a) << 700u => 700
[dump] cp::dec(0, 4, true_) << 20000 => 2 0000
[dump] cp::dec(0, 4, true_a) << 5000 => 5000
[dump] cp::dec(0, 4, true_) << -6000 => - 6000
[dump] cp::dec(0, 4, true_aa) << 800 => 800
[dump] cp::dec(0, 4, true_a) << -900 => -900
[dump] cp::hex(0, 2, true_) << 0x83u => 0x 83
[dump] cp::hex(0, 2, false) << 0x85u => 0x 85
[dump] cp::hex(0, 2, true_a) << 0x84 => 0x 84
[dump] cp::hex(0, 2, false_) << 0x85 => 0x 85
[dump] cp::hex(0, 2, true_) << -0x74 => -0x 74
[dump] cp::hex(0, 2, false) << -0x85 => -0x 85
[dump] cp::hex(2, 2, true_) << 0x86u => 0x 86
[dump] cp::hex(2, 2, false) << 0x89u => 0x 89
[dump] cp::hex(2, 2, true_a) << 0x87 =>  0x 87
[dump] cp::hex(2, 2, false_) << 0x88 =>  0x 88
[dump] cp::hex(2, 2, true_) << -0x77 => -0x 77
[dump] cp::hex(2, 2, false) << -0x89 => -0x 89
[dump] cp::hex(3, 2, true_) << 0x89u => 0x   89
[dump] cp::hex(3, 2, false) << 0x8bu => 0x 0 8B
[dump] cp::hex(3, 2, true_a) << 0x8a =>  0x   8A
[dump] cp::hex(3, 2, false_) << 0x8b =>  0x 0 8B
[dump] cp::hex(3, 2, true_) << -0x7a => -0x   7A
[dump] cp::hex(3, 2, false) << -0x8b => -0x 0 8B
[dump] cp::hex(4, 2, true_) << 0x8cu => 0x    8C
[dump] cp::hex(4, 2, false) << 0x8eu => 0x 00 8E
[dump] cp::hex(4, 2, true_a) << 0x8d =>  0x    8D
[dump] cp::hex(4, 2, false_) << 0x8e =>  0x 00 8E
[dump] cp::hex(4, 2, true_) << -0x7d => -0x    7D
[dump] cp::hex(4, 2, false) << -0x8e => -0x 00 8E
[dump] cp::hex(5, 2, true_) << 0x8fu => 0x      8F
[dump] cp::hex(5, 2, false) << 0x82u => 0x 0 00 82
[dump] cp::hex(5, 2, true_a) << 0x80 =>  0x      80
[dump] cp::hex(5, 2, false_) << 0x82 =>  0x 0 00 82
[dump] cp::hex(5, 2, true_) << -0x71 => -0x      71
[dump] cp::hex(5, 2, false) << -0x82 => -0x 0 00 82
[dump] cp::hex(5, 4, false) << 0x389u => 0x 0 0389
[dump] cp::hex(5, 4, true_) << 0x389u => 0x    389
[dump] cp::hex(5, 4, false) << 0x289u => 0x 0 0289
[dump] cp::hex(5, 4, true_) << 0x982u => 0x    982
[dump] cp::hex(5, 4, false_) << 0x902 =>  0x 0 0902
[dump] cp::hex(5, 4, true_a) << 0x382 =>  0x    382
[dump] cp::hex(5, 4, false_) << 0x291 =>  0x 0 0291
[dump] cp::hex(5, 4, true_a) << 0x027 =>  0x     27
[dump] cp::hex(5, 0, false) << 0x9283u => 0x09283
[dump] cp::hex(5, 0, true_) << 0x8282u => 0x 8282
[dump] cp::hex(5, 0, false) << 0x8282u => 0x08282
[dump] cp::hex(5, 0, true_) << 0x9192u => 0x 9192
[dump] cp::hex(5, 0, false_) << 0x0920 =>  0x00920
[dump] cp::hex(5, 0, true_a) << 0x0923 =>  0x  923
[dump] cp::hex(5, 0, false_) << 0x0291 =>  0x00291
[dump] cp::hex(5, 0, true_a) << 0x0939 =>  0x  939
[dump] 0b0000000000000000000000000000000000000000000000000000000000000000
[dump] 0b0000000000000000000000000000000000000000000000000000000000000001
[dump] 0b0000000000000000000000000000000000000000000000000000000000000001
[dump] 0b0000000000000000000000000000000000000000000000000000000000000010
[dump] 0b0000000000000000000000000000000000000000000000000000000000000011
[dump] 0b0000000000000000000000000000000000000000000000000000000000000100
[dump] 0b0000000000000000000000000000000000000000000000000000000000000111
[dump] 0b0000000000000000000000000000000000000000000000000000000000001000
[dump] 0b0000000000000000000000000000000000000000000000000000000000001111
[dump] 0b0000000000000000000000000000000000000000000000000000000000010000
[dump] 0b0000000000000000000000000000000000000000000000000000000000011111
[dump] 0b0000000000000000000000000000000000000000000000000000000000100000
[dump] 0b0000000000000000000000000000000000000000000000000000000000111111
[dump] 0b0000000000000000000000000000000000000000000000000000000001000000
[dump] 0b0000000000000000000000000000000000000000000000000000000001111111
[dump] 0b0000000000000000000000000000000000000000000000000000000010000000
[dump] 0b0000000000000000000000000000000000000000000000000000000011111111
[dump] 0b0000000000000000000000000000000000000000000000000000000100000000
[dump] 0b0000000000000000000000000000000000000000000000000000000111111111
[dump] 0b0000000000000000000000000000000000000000000000000000001000000000
[dump] 0b0000000000000000000000000000000000000000000000000000001111111111
[dump] 0b0000000000000000000000000000000000000000000000000000010000000000
[dump] 0b0000000000000000000000000000000000000000000000000000011111111111
[dump] 0b0000000000000000000000000000000000000000000000000000100000000000
[dump] 0b0000000000000000000000000000000000000000000000000000111111111111
[dump] 0b0000000000000000000000000000000000000000000000000001000000000000
[dump] 0b0000000000000000000000000000000000000000000000000001111111111111
[dump] 0b0000000000000000000000000000000000000000000000000010000000000000
[dump] 0b0000000000000000000000000000000000000000000000000011111111111111
[dump] 0b0000000000000000000000000000000000000000000000000100000000000000
[dump] 0b0000000000000000000000000000000000000000000000000111111111111111
[dump] 0b0000000000000000000000000000000000000000000000001000000000000000
[dump] 0b0000000000000000000000000000000000000000000000001111111111111111
[dump] 0b0000000000000000000000000000000000000000000000010000000000000000
[dump] 0b0000000000000000000000000000000000000000000000011111111111111111
[dump] 0b0000000000000000000000000000000000000000000000100000000000000000
[dump] 0b0000000000000000000000000000000000000000000000111111111111111111
[dump] 0b0000000000000000000000000000000000000000000001000000000000000000
[dump] 0b0000000000000000000000000000000000000000000001111111111111111111
[dump] 0b0000000000000000000000000000000000000000000010000000000000000000
[dump] 0b0000000000000000000000000000000000000000000011111111111111111111
[dump] 0b0000000000000000000000000000000000000000000100000000000000000000
[dump] 0b0000000000000000000000000000000000000000000111111111111111111111
[dump] 0b0000000000000000000000000000000000000000001000000000000000000000
[dump] 0b0000000000000000000000000000000000000000001111111111111111111111
[dump] 0b0000000000000000000000000000000000000000010000000000000000000000
[dump] 0b0000000000000000000000000000000000000000011111111111111111111111
[dump] 0b0000000000000000000000000000000000000000100000000000000000000000
[dump] 0b0000000000000000000000000000000000000000111111111111111111111111
[dump] 0b0000000000000000000000000000000000000001000000000000000000000000
[dump] 0b0000000000000000000000000000000000000001111111111111111111111111
[dump] 0b0000000000000000000000000000000000000010000000000000000000000000
[dump] 0b0000000000000000000000000000000000000011111111111111111111111111
[dump] 0b0000000000000000000000000000000000000100000000000000000000000000
[dump] 0b0000000000000000000000000000000000000111111111111111111111111111
[dump] 0b0000000000000000000000000000000000001000000000000000000000000000
[dump] 0b0000000000000000000000000000000000001111111111111111111111111111
[dump] 0b0000000000000000000000000000000000010000000000000000000000000000
[dump] 0b0000000000000000000000000000000000011111111111111111111111111111
[dump] 0b0000000000000000000000000000000000100000000000000000000000000000
[dump] 0b0000000000000000000000000000000000111111111111111111111111111111
[dump] 0b0000000000000000000000000000000001000000000000000000000000000000
[dump] 0b0000000000000000000000000000000001111111111111111111111111111111
[dump] 0b0000000000000000000000000000000010000000000000000000000000000000
[dump] 0b0000000000000000000000000000000011111111111111111111111111111111
[dump] 0b0000000000000000000000000000000100000000000000000000000000000000
[dump] 0b0000000000000000000000000000000111111111111111111111111111111111
[dump] 0b0000000000000000000000000000001000000000000000000000000000000000
[dump] 0b0000000000000000000000000000001111111111111111111111111111111111
[dump] 0b0000000000000000000000000000010000000000000000000000000000000000
[dump] 0b0000000000000000000000000000011111111111111111111111111111111111
[dump] 0b0000000000000000000000000000100000000000000000000000000000000000
[dump] 0b0000000000000000000000000000111111111111111111111111111111111111
[dump] 0b0000000000000000000000000001000000000000000000000000000000000000
[dump] 0b0000000000000000000000000001111111111111111111111111111111111111
[dump] 0b0000000000000000000000000010000000000000000000000000000000000000
[dump] 0b0000000000000000000000000011111111111111111111111111111111111111
[dump] 0b0000000000000000000000000100000000000000000000000000000000000000
[dump] 0b0000000000000000000000000111111111111111111111111111111111111111
[dump] 0b0000000000000000000000001000000000000000000000000000000000000000
[dump] 0b0000000000000000000000001111111111111111111111111111111111111111
[dump] 0b0000000000000000000000010000000000000000000000000000000000000000
[dump] 0b0000000000000000000000011111111111111111111111111111111111111111
[dump] 0b0000000000000000000000100000000000000000000000000000000000000000
[dump] 0b0000000000000000000000111111111111111111111111111111111111111111
[dump] 0b0000000000000000000001000000000000000000000000000000000000000000
[dump] 0b0000000000000000000001111111111111111111111111111111111111111111
[dump] 0b0000000000000000000010000000000000000000000000000000000000000000
[dump] 0b0000000000000000000011111111111111111111111111111111111111111111
[dump] 0b0000000000000000000100000000000000000000000000000000000000000000
[dump] 0b0000000000000000000111111111111111111111111111111111111111111111
[dump] 0b0000000000000000001000000000000000000000000000000000000000000000
[dump] 0b0000000000000000001111111111111111111111111111111111111111111111
[dump] 0b0000000000000000010000000000000000000000000000000000000000000000
[dump] 0b0000000000000000011111111111111111111111111111111111111111111111
[dump] 0b0000000000000000100000000000000000000000000000000000000000000000
[dump] 0b0000000000000000111111111111111111111111111111111111111111111111
[dump] 0b0000000000000001000000000000000000000000000000000000000000000000
[dump] 0b0000000000000001111111111111111111111111111111111111111111111111
[dump] 0b0000000000000010000000000000000000000000000000000000000000000000
[dump] 0b0000000000000011111111111111111111111111111111111111111111111111
[dump] 0b0000000000000100000000000000000000000000000000000000000000000000
[dump] 0b0000000000000111111111111111111111111111111111111111111111111111
[dump] 0b0000000000001000000000000000000000000000000000000000000000000000
[dump] 0b0000000000001111111111111111111111111111111111111111111111111111
[dump] 0b0000000000010000000000000000000000000000000000000000000000000000
[dump] 0b0000000000011111111111111111111111111111111111111111111111111111
[dump] 0b0000000000100000000000000000000000000000000000000000000000000000
[dump] 0b0000000000111111111111111111111111111111111111111111111111111111
[dump] 0b0000000001000000000000000000000000000000000000000000000000000000
[dump] 0b0000000001111111111111111111111111111111111111111111111111111111
[dump] 0b0000000010000000000000000000000000000000000000000000000000000000
[dump] 0b0000000011111111111111111111111111111111111111111111111111111111
[dump] 0b0000000100000000000000000000000000000000000000000000000000000000
[dump] 0b0000000111111111111111111111111111111111111111111111111111111111
[dump] 0b0000001000000000000000000000000000000000000000000000000000000000
[dump] 0b0000001111111111111111111111111111111111111111111111111111111111
[dump] 0b0000010000000000000000000000000000000000000000000000000000000000
[dump] 0b0000011111111111111111111111111111111111111111111111111111111111
[dump] 0b0000100000000000000000000000000000000000000000000000000000000000
[dump] 0b0000111111111111111111111111111111111111111111111111111111111111
[dump] 0b0001000000000000000000000000000000000000000000000000000000000000
[dump] 0b0001111111111111111111111111111111111111111111111111111111111111
[dump] 0b0010000000000000000000000000000000000000000000000000000000000000
[dump] 0b0011111111111111111111111111111111111111111111111111111111111111
[dump] 0b0100000000000000000000000000000000000000000000000000000000000000
[dump] 0b0111111111111111111111111111111111111111111111111111111111111111
[dump] 0b1000000000000000000000000000000000000000000000000000000000000000
int8_t cp::bin(), cp::oct()
[dump] m_1_a | cp::bin() => -0b00000001, m_1_a | cp::oct() => -0o001
[dump] max_a | cp::bin() =>  0b01111111, max_a | cp::oct() =>  0o177
[dump] min_a | cp::bin() => -0b10000000, min_a | cp::oct() => -0o200
[dump] umax_ | cp::bin() => 0b11111111, umax_ | cp::oct() => 0o377
[dump] m_1_ | cp::ubin() => 0b11111111 u, m_1_ | cp::uoct() => 0o377 u
[dump] max_ | cp::ubin() => 0b01111111 u, max_ | cp::uoct() => 0o177 u
[dump] min_ | cp::ubin() => 0b10000000 u, min_ | cp::uoct() => 0o200 u
[dump] umax | cp::ubin() => 0b11111111, umax | cp::uoct() => 0o377
int8_t cp::hex(), cp::dec()
[dump] m_1_a | cp::hex() => -0x01, m_1_a | cp::dec() =>   -1
[dump] max_a | cp::hex() =>  0x7F, max_a | cp::dec() =>  127
[dump] min_a | cp::hex() => -0x80, min_a | cp::dec() => -128
[dump] umax_ | cp::hex() => 0xFF, umax_ | cp::dec() => 255
[dump] m_1_ | cp::uhex() => 0xFF u, m_1_ | cp::udec() =>  -1
[dump] max_ | cp::uhex() => 0x7F u, max_ | cp::udec() => 127
[dump] min_ | cp::uhex() => 0x80 u, min_ | cp::udec() => -128
[dump] umax | cp::uhex() => 0xFF, umax | cp::udec() => 255
int16_t cp::bin(), cp::oct()
[dump] m_1_a | cp::bin() => -0b0000000000000001, m_1_a | cp::oct() => -0o000001
[dump] max_a | cp::bin() =>  0b0111111111111111, max_a | cp::oct() =>  0o077777
[dump] min_a | cp::bin() => -0b1000000000000000, min_a | cp::oct() => -0o100000
[dump] umax_ | cp::bin() => 0b1111111111111111, umax_ | cp::oct() => 0o177777
[dump] m_1_ | cp::ubin() => 0b1111111111111111 u, m_1_ | cp::uoct() => 0o177777 u
[dump] max_ | cp::ubin() => 0b0111111111111111 u, max_ | cp::uoct() => 0o077777 u
[dump] min_ | cp::ubin() => 0b1000000000000000 u, min_ | cp::uoct() => 0o100000 u
[dump] umax | cp::ubin() => 0b1111111111111111, umax | cp::uoct() => 0o177777
int16_t cp::hex(), cp::dec()
[dump] m_1_a | cp::hex() => -0x0001, m_1_a | cp::dec() =>     -1
[dump] max_a | cp::hex() =>  0x7FFF, max_a | cp::dec() =>  32767
[dump] min_a | cp::hex() => -0x8000, min_a | cp::dec() => -32768
[dump] umax_ | cp::hex() => 0xFFFF, umax_ | cp::dec() => 65535
[dump] m_1_ | cp::uhex() => 0xFFFF u, m_1_ | cp::udec() =>    -1
[dump] max_ | cp::uhex() => 0x7FFF u, max_ | cp::udec() => 32767
[dump] min_ | cp::uhex() => 0x8000 u, min_ | cp::udec() => -32768
[dump] umax | cp::uhex() => 0xFFFF, umax | cp::udec() => 65535
int32_t cp::bin(), cp::oct()
[dump] m_1_a | cp::bin() => -0b00000000000000000000000000000001, m_1_a | cp::oct() => -0o00000000001
[dump] max_a | cp::bin() =>  0b01111111111111111111111111111111, max_a | cp::oct() =>  0o17777777777
[dump] min_a | cp::bin() => -0b10000000000000000000000000000000, min_a | cp::oct() => -0o20000000000
[dump] umax_ | cp::bin() => 0b11111111111111111111111111111111, umax_ | cp::oct() => 0o37777777777
[dump] m_1_ | cp::ubin() => 0b11111111111111111111111111111111 u, m_1_ | cp::uoct() => 0o37777777777 u
[dump] max_ | cp::ubin() => 0b01111111111111111111111111111111 u, max_ | cp::uoct() => 0o17777777777 u
[dump] min_ | cp::ubin() => 0b10000000000000000000000000000000 u, min_ | cp::uoct() => 0o20000000000 u
[dump] umax | cp::ubin() => 0b11111111111111111111111111111111, umax | cp::uoct() => 0o37777777777
int32_t cp::hex(), cp::dec()
[dump] m_1_a | cp::hex() => -0x00000001, m_1_a | cp::dec() =>          -1
[dump] max_a | cp::hex() =>  0x7FFFFFFF, max_a | cp::dec() =>  2147483647
[dump] min_a | cp::hex() => -0x80000000, min_a | cp::dec() => -2147483648
[dump] umax_ | cp::hex() => 0xFFFFFFFF, umax_ | cp::dec() => 4294967295
[dump] m_1_ | cp::uhex() => 0xFFFFFFFF u, m_1_ | cp::udec() =>         -1
[dump] max_ | cp::uhex() => 0x7FFFFFFF u, max_ | cp::udec() => 2147483647
[dump] min_ | cp::uhex() => 0x80000000 u, min_ | cp::udec() => -2147483648
[dump] umax | cp::uhex() => 0xFFFFFFFF, umax | cp::udec() => 4294967295
int64_t cp::bin(), cp::oct()
[dump] m_1_a | cp::bin() => -0b0000000000000000000000000000000000000000000000000000000000000001, m_1_a | cp::oct() => -0o0000000000000000000001
[dump] max_a | cp::bin() =>  0b0111111111111111111111111111111111111111111111111111111111111111, max_a | cp::oct() =>  0o0777777777777777777777
[dump] min_a | cp::bin() => -0b1000000000000000000000000000000000000000000000000000000000000000, min_a | cp::oct() => -0o1000000000000000000000
[dump] umax_ | cp::bin() => 0b1111111111111111111111111111111111111111111111111111111111111111, umax_ | cp::oct() => 0o1777777777777777777777
[dump] m_1_ | cp::ubin() => 0b1111111111111111111111111111111111111111111111111111111111111111 u, m_1_ | cp::uoct() => 0o1777777777777777777777 u
[dump] max_ | cp::ubin() => 0b0111111111111111111111111111111111111111111111111111111111111111 u, max_ | cp::uoct() => 0o0777777777777777777777 u
[dump] min_ | cp::ubin() => 0b1000000000000000000000000000000000000000000000000000000000000000 u, min_ | cp::uoct() => 0o1000000000000000000000 u
[dump] umax | cp::ubin() => 0b1111111111111111111111111111111111111111111111111111111111111111, umax | cp::uoct() => 0o1777777777777777777777
int64_t cp::hex(), cp::dec()
[dump] m_1_a | cp::hex() => -0x0000000000000001, m_1_a | cp::dec() =>                   -1
[dump] max_a | cp::hex() =>  0x7FFFFFFFFFFFFFFF, max_a | cp::dec() =>  9223372036854775807
[dump] min_a | cp::hex() => -0x8000000000000000, min_a | cp::dec() => -9223372036854775808
[dump] umax_ | cp::hex() => 0xFFFFFFFFFFFFFFFF, umax_ | cp::dec() => 18446744073709551615
[dump] m_1_ | cp::uhex() => 0xFFFFFFFFFFFFFFFF u, m_1_ | cp::udec() =>                  -1
[dump] max_ | cp::uhex() => 0x7FFFFFFFFFFFFFFF u, max_ | cp::udec() => 9223372036854775807
[dump] min_ | cp::uhex() => 0x8000000000000000 u, min_ | cp::udec() => -9223372036854775808
[dump] umax | cp::uhex() => 0xFFFFFFFFFFFFFFFF, umax | cp::udec() => 18446744073709551615
[dump] 3.14159265f | cp::format("%.3f") => 3.142
[dump] 3.141592653589793L | cp::format("%.15Lf") => 3.141592653589793
[dump] 314159265 | cp::format("%020d") => 00000000000314159265
[dump] 31415926535ll | cp::format("%020lld") => 00000000031415926535
[dump] complex1 | cp::format("%.10f") => 0.0000000000 - 1.0000000000i ( abs= 1.0000000000, arg/pi= -0.5000000000 )
[dump] vec5 => [
         [ true, false, true, false ],
         [ false, false, false, false ],
         [ true, true, true, true ]
       ]
[dump] vec5 | cp::bw() => [
         [ true , false, true , false ],
         [ false, false, false, false ],
         [ true , true , true , true  ]
       ]
[dump] vec5 | cp::bw(true) => [
         [  true, false,  true, false ],
         [ false, false, false, false ],
         [  true,  true,  true,  true ]
       ]
[dump] vec5 | cp::boolnum() => [
         [ 1, 0, 1, 0 ],
         [ 0, 0, 0, 0 ],
         [ 1, 1, 1, 1 ]
       ]
[dump] vec5 | cp::hex() | cp::bw() => [
         [ true , false, true , false ],
         [ false, false, false, false ],
         [ true , true , true , true  ]
       ]
[dump] vec5 | cp::hex() | cp::bw(true) => [
         [  true, false,  true, false ],
         [ false, false, false, false ],
         [  true,  true,  true,  true ]
       ]
[dump] vec5 | cp::hex() | cp::boolnum() => [
         [ 1, 0, 1, 0 ],
         [ 0, 0, 0, 0 ],
         [ 1, 1, 1, 1 ]
       ]
[dump] vec6 => [ 'P', 'i', '=', '3', '.', '1', '4', '.', '.', '.' ]
[dump] vec6 | cp::charhex() => [ 'P' 0x50, 'i' 0x69, '=' 0x3D, '3' 0x33, '.' 0x2E, '1' 0x31, '4' 0x34, '.' 0x2E, '.' 0x2E, '.' 0x2E ]
[dump] vec6 | cp::bin() | cp::charhex() => [ 'P' 0x50, 'i' 0x69, '=' 0x3D, '3' 0x33, '.' 0x2E, '1' 0x31, '4' 0x34, '.' 0x2E, '.' 0x2E, '.' 0x2E ]
[dump] vec2d | (back | cp::index()) => [
         ...,
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | (cp::index() | back) => [
         ...,
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | (back | index) => [
         ...,
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec2d | back | index => [
         ...,
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec4back | index => [
         ...,
         3: [ 0: 15, 1: -16 ],
         4: [ 0: -17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] cp::front(2) << cp::middle(1) << cp::back(2) << cp::both_ends(1) << non_copyable_and_non_movable_class1 => non_copyable_and_non_movable_class{ 
         str_member= "This object has a pointer and reference_wrapper to itself.", 
         pointer= *non_copyable_and_non_movable_class{ ... }, 
         ref= non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *..., 
           ref= non_copyable_and_non_movable_class{ ... }
         }
       }
[dump] non_copyable_and_non_movable_class_container1 => [
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *..., 
           ref= non_copyable_and_non_movable_class{ ... }
         },
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *..., 
           ref= non_copyable_and_non_movable_class{ ... }
         }
       ]
[dump] cp::front(1) << non_copyable_and_non_movable_class_container1 => [
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *..., 
           ref= non_copyable_and_non_movable_class{ ... }
         },
         ...
       ]
[dump] tuple_of_non_copyable_and_non_movable_class1 => (
         non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *..., 
           ref= non_copyable_and_non_movable_class{ ... }
         },
         non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *..., 
           ref= non_copyable_and_non_movable_class{ ... }
         }
       )
[dump] container_of_non_copyable_non_const_iterator1
         => [ "This iterator is non-copyable and doesn't support const.", "This iterator is non-copyable and doesn't support const." ]
[dump] container_of_lvalue_iterator1 => [
         "This iterator is non-copyable and non-movable and doesn't support const.",
         "This iterator is non-copyable and non-movable and doesn't support const."
       ]
[dump] unsupported_container_of_supported_container_a1 => Unsupported Type
[dump] unsupported_container_of_supported_container_b1 => Unsupported Type
[dump] unsupported_non_const_class1 => Unsupported Type
