[dump] false => false, 0 => 0, 0.0 => 0.000000, '0' => '0', (const char *)"0" => "0", string{"0"} => "0", string_view{"0"} => "0"
[dump] true => true, 3.14 => 3.140000, 159265 => 159265, "This is a test string" => "This is a test string"
[dump] "This contains newline\nhere." => 
`This contains newline
here.`,
       R"(This contains ".)" => `This contains ".`,
       R"(This contains `.)" => "This contains `."
[dump] "\n\n\n\n" => 
`



`
[dump] (vector<int>{3, 1, 4}) => [ 3, 1, 4 ]
[dump] (vector<vector<int>>{{3}, {1, 4}, {1, 5, 9}}) => [
         [ 3 ],
         [ 1, 4 ],
         [ 1, 5, 9 ]
       ]
[dump] (vector<vector<vector<int>>>{{}, {{2, 6}}, {{5}, {3}, {5}}}) => [
         [ ],
         [
           [ 2, 6 ]
         ],
         [
           [ 5 ],
           [ 3 ],
           [ 5 ]
         ]
       ]
[dump] (vector<int>{3, 1, 4}) => [ 3, 1, 4 ],
       vec => [
         [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
       ],
       (vector<vector<vector<int>>>{{{2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45}}}) => [
         [
           [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 3, 45 ]
         ]
       ]
[dump] (vector<int>{2, 3}) => [ 2, 3 ], (vector<int>{3, 4}) => [ 3, 4 ], 
       (vector<int>{2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1}) => [ 2, 4, 4, 5, 6, 4, 5, 2, 4, 5, 3, 5, 6, 7, 5, 6, 6, 6, 7, 7, 8, 1 ]
[dump] (vector<int>{2, 3}) => [ 2, 3 ],
       (vector<int>{3, 4}) => [ 3, 4 ],
       (vector<vector<int>>{{2}, {4}, {4}, {5}, {6}}) => [
         [ 2 ],
         [ 4 ],
         [ 4 ],
         [ 5 ],
         [ 6 ]
       ]
[dump] (vector{make_pair(1, 9), make_pair(3, 4), make_pair(5, 7)}) => [
         ( 1, 9 ),
         ( 3, 4 ),
         ( 5, 7 )
       ]
[dump] c_style_array => [ 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3 ]
[dump] vec => [
         [ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
       ]
[dump] make_pair(8, 'a') => ( 8, 'a' )
[dump] make_tuple( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.9 )
         => ( 9, "This is another string.", "This is another string.", "This is another string.", "This is another string.", 7.900000 )
[dump] (map<double, string>{{3.2, "This is a pen."}, {3.8, "I have an apple."}}) => { 3.200000: "This is a pen.", 3.800000: "I have an apple." }
[dump] multimap1 => {
         'a' (4): [ 10, 40, 12, 44 ],
         'b' (2): [ 20, 23 ],
         'c' (2): [ 30, 31 ]
       }
[dump] (set<string>{"A", "p", "p", "l", "e", " ", "P", "e", "n"}) => { " ", "A", "P", "e", "l", "n", "p" }
[dump] multiset1 => { 1 (2), 3 (1), 4 (1) }
[dump] queue1 => std::queue{ size()= 0 }
[dump] queue1 => std::queue{ front()= 3, size()= 1 }
[dump] queue1 => std::queue{ front()= 3, back()= 2, size()= 2 }
[dump] queue1 => std::queue{ front()= 3, back()= 1, size()= 3 }
[dump] priority_queue1 => std::priority_queue{ size()= 0 }
[dump] priority_queue1 => std::priority_queue{ top()= '3', size()= 1 }
[dump] priority_queue1 => std::priority_queue{ top()= '3', size()= 2 }
[dump] priority_queue1 => std::priority_queue{ top()= '3', size()= 3 }
[dump] stack1 => std::stack{ size()= 0 }
[dump] stack1 => std::stack{ top()= "3", size()= 1 }
[dump] stack1 => std::stack{ top()= "2", size()= 2 }
[dump] stack1 => std::stack{ top()= "1", size()= 3 }
[dump] int_ptr => *65
[dump] *int_ptr => 65
[dump] char_ptr => "A"
[dump] nullptr => nullptr
[dump] shared_ptr1 => *42, weak_ptr1 => *42, unique_ptr1 => *42, c => *42
[dump] shared_ptr1 => *3, weak_ptr1 => nullptr, unique_ptr1 => *42
[dump] class_a1 => decltype(class_a1){ int_a= 314159265, long_b= 1, a_str()= "314159265" }
[dump] non_copyable_and_non_movable_class1 => non_copyable_and_non_movable_class{ 
         str_member= "This object has a pointer and reference_wrapper to itself.", 
         pointer= *non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }, 
         ref= non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }, 
           ref= non_copyable_and_non_movable_class{ 
             str_member= "This object has a pointer and reference_wrapper to itself.", 
             pointer= *non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }, 
             ref= non_copyable_and_non_movable_class{ 
               str_member= "This object has a pointer and reference_wrapper to itself.", 
               pointer= *non_copyable_and_non_movable_class{ ... }, 
               ref= non_copyable_and_non_movable_class{ ... }
             }
           }
         }
       }
[dump] int_ptr => *65, enum_a_s => enum_a::s, enum_a_k => enum_a::k, enum_a_l => enum_a::?
[dump] bitset2 => 0b 01, bitset3 => 0b 010, bitset4 => 0b 0011, bitset5 => 0b 0 0100, bitset7 => 0b 011 1010, bitset8 => 0b 0011 1010, bitset9 => 0b 0 1100 1010, 
       bitset10 => 0b 00 1100 1010
[dump] optional1 => ?1
[dump] optional1 => std::nullopt
[dump] nullopt => std::nullopt
[dump] variant1 => |""
[dump] variant1 => |0
[dump] complex1 => 0.000000 - 1.000000i ( abs= 1.000000, arg/pi= -0.500000 )
[dump] complex2 => 10.000000 + 1.000000i ( abs= 10.049876, arg/pi= 0.031726 )
[dump] logic_error1 => std::logic_error{ what()= "This is a test error." }
[dump] vec.begin() => Unsupported Type
[dump] vec.begin() => *[ 2, 4, 6, 7, 8, 9, 0, 1, 1, 1, 7, 8, 9, 0, 1, 1, 1, 1, 1, 1, 1 ]
[dump] ostream_able_class_a_1 => ostream_able_class_a
[dump] unsupported_class1 => Unsupported Type
[dump] main => Unsupported Type, &main => Unsupported Type, &unsupported_class::k => Unsupported Type, &unsupported_class::str => Unsupported Type
[dump] setw(5) => Unsupported Type, boolalpha => Unsupported Type
[dump] cp::es_style_t::no_es => cpp_dump::es_style_t::no_es,
       cp::es_style_t::by_syntax => cpp_dump::es_style_t::by_syntax,
       cp::es_value => cpp_dump::es_value_t{ 
         log= "\e[02m", 
         expression= "\e[36m", 
         reserved= "", 
         character= "", 
         op= "\e[02m", 
         identifier= "\e[32m", 
         member= "\e[36m", 
         unsupported= "\e[31m", 
         bracket_by_depth= [ "\e[02m" ]
       }
[dump] cp::cont_indent_style_t::minimal => cpp_dump::cont_indent_style_t::minimal, 
       cp::cont_indent_style_t::when_nested => cpp_dump::cont_indent_style_t::when_nested, 
       cp::cont_indent_style_t::when_non_tuples_nested => cpp_dump::cont_indent_style_t::when_non_tuples_nested, 
       cp::cont_indent_style_t::always => cpp_dump::cont_indent_style_t::always, cp::cont_indent_style => cpp_dump::cont_indent_style_t::when_nested
[dump] cp::int_style(16) << 10000u => 00 00 27 10 _16, cp::int_style(16) << 10000l => 00 00 27 10 _16, cp::int_style(16) << 10000ul => 00 00 27 10 _16, 
       cp::int_style(16) << 10000ll => 00 00 27 10 _16, cp::int_style(16) << 10000ull => 00 00 27 10 _16
[dump] array50 => [ 0, 1, ... ], map50 => { 0: 1, 1: 2, ... }, set50 => { 0, 1, ... }
[dump] cp::front() << array50 => [ 0, 1, ... ], cp::front() << map50 => { 0: 1, 1: 2, ... }, cp::front() << set50 => { 0, 1, ... }
[dump] cp::middle() << array50 => [ ..., 24, 25, ... ], cp::middle() << map50 => { ..., 24: 25, 25: 26, ... }, cp::middle() << set50 => { ..., 24, 25, ... }
[dump] cp::back() << array50 => [ ..., 48, 49 ], cp::back() << map50 => { ..., 48: 49, 49: 50 }, cp::back() << set50 => { ..., 48, 49 }
[dump] cp::both_ends() << array50 => [ 0, ..., 49 ], cp::both_ends() << map50 => { 0: 1, ..., 49: 50 }, cp::both_ends() << set50 => { 0, ..., 49 }
[dump] cp::front(10) << array50 => [ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... ], 
       cp::front(10) << map50 => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8, 8: 9, 9: 10, ... }, 
       cp::front(10) << set50 => { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, ... }
[dump] cp::back(10) << array50 => [ ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 ], 
       cp::back(10) << map50 => { ..., 40: 41, 41: 42, 42: 43, 43: 44, 44: 45, 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       cp::back(10) << set50 => { ..., 40, 41, 42, 43, 44, 45, 46, 47, 48, 49 }
[dump] cp::middle(10) << array50 => [ ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... ], 
       cp::middle(10) << map50 => { ..., 20: 21, 21: 22, 22: 23, 23: 24, 24: 25, 25: 26, 26: 27, 27: 28, 28: 29, 29: 30, ... }, 
       cp::middle(10) << set50 => { ..., 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, ... }
[dump] cp::both_ends(10) << array50 => [ 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 ], 
       cp::both_ends(10) << map50 => { 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, ..., 45: 46, 46: 47, 47: 48, 48: 49, 49: 50 }, 
       cp::both_ends(10) << set50 => { 0, 1, 2, 3, 4, ..., 45, 46, 47, 48, 49 }
[dump] cp::front(40) << array50 => [
         0,
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         ...
       ],
       cp::front(40) << map50 => {
         0: 1,
         1: 2,
         2: 3,
         3: 4,
         4: 5,
         5: 6,
         6: 7,
         7: 8,
         8: 9,
         9: 10,
         10: 11,
         11: 12,
         12: 13,
         13: 14,
         14: 15,
         15: 16,
         16: 17,
         17: 18,
         18: 19,
         19: 20,
         20: 21,
         21: 22,
         22: 23,
         23: 24,
         24: 25,
         25: 26,
         26: 27,
         27: 28,
         28: 29,
         29: 30,
         30: 31,
         31: 32,
         32: 33,
         33: 34,
         34: 35,
         35: 36,
         36: 37,
         37: 38,
         38: 39,
         39: 40,
         ...
       },
       cp::front(40) << set50 => {
         0,
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         ...
       }
[dump] cp::middle(40) << array50 => [
         ...,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         40,
         41,
         42,
         43,
         44,
         ...
       ],
       cp::middle(40) << map50 => {
         ...,
         5: 6,
         6: 7,
         7: 8,
         8: 9,
         9: 10,
         10: 11,
         11: 12,
         12: 13,
         13: 14,
         14: 15,
         15: 16,
         16: 17,
         17: 18,
         18: 19,
         19: 20,
         20: 21,
         21: 22,
         22: 23,
         23: 24,
         24: 25,
         25: 26,
         26: 27,
         27: 28,
         28: 29,
         29: 30,
         30: 31,
         31: 32,
         32: 33,
         33: 34,
         34: 35,
         35: 36,
         36: 37,
         37: 38,
         38: 39,
         39: 40,
         40: 41,
         41: 42,
         42: 43,
         43: 44,
         44: 45,
         ...
       },
       cp::middle(40) << set50 => {
         ...,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         40,
         41,
         42,
         43,
         44,
         ...
       }
[dump] cp::back(40) << array50 => [
         ...,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         40,
         41,
         42,
         43,
         44,
         45,
         46,
         47,
         48,
         49
       ],
       cp::back(40) << map50 => {
         ...,
         10: 11,
         11: 12,
         12: 13,
         13: 14,
         14: 15,
         15: 16,
         16: 17,
         17: 18,
         18: 19,
         19: 20,
         20: 21,
         21: 22,
         22: 23,
         23: 24,
         24: 25,
         25: 26,
         26: 27,
         27: 28,
         28: 29,
         29: 30,
         30: 31,
         31: 32,
         32: 33,
         33: 34,
         34: 35,
         35: 36,
         36: 37,
         37: 38,
         38: 39,
         39: 40,
         40: 41,
         41: 42,
         42: 43,
         43: 44,
         44: 45,
         45: 46,
         46: 47,
         47: 48,
         48: 49,
         49: 50
       },
       cp::back(40) << set50 => {
         ...,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         20,
         21,
         22,
         23,
         24,
         25,
         26,
         27,
         28,
         29,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         40,
         41,
         42,
         43,
         44,
         45,
         46,
         47,
         48,
         49
       }
[dump] cp::both_ends(40) << array50 => [
         0,
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         ...,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         40,
         41,
         42,
         43,
         44,
         45,
         46,
         47,
         48,
         49
       ],
       cp::both_ends(40) << map50 => {
         0: 1,
         1: 2,
         2: 3,
         3: 4,
         4: 5,
         5: 6,
         6: 7,
         7: 8,
         8: 9,
         9: 10,
         10: 11,
         11: 12,
         12: 13,
         13: 14,
         14: 15,
         15: 16,
         16: 17,
         17: 18,
         18: 19,
         19: 20,
         ...,
         30: 31,
         31: 32,
         32: 33,
         33: 34,
         34: 35,
         35: 36,
         36: 37,
         37: 38,
         38: 39,
         39: 40,
         40: 41,
         41: 42,
         42: 43,
         43: 44,
         44: 45,
         45: 46,
         46: 47,
         47: 48,
         48: 49,
         49: 50
       },
       cp::both_ends(40) << set50 => {
         0,
         1,
         2,
         3,
         4,
         5,
         6,
         7,
         8,
         9,
         10,
         11,
         12,
         13,
         14,
         15,
         16,
         17,
         18,
         19,
         ...,
         30,
         31,
         32,
         33,
         34,
         35,
         36,
         37,
         38,
         39,
         40,
         41,
         42,
         43,
         44,
         45,
         46,
         47,
         48,
         49
       }
[dump] vec2 => [
         [
           [ 1 ]
         ],
         [
           [ 2, 6 ]
         ],
         [
           [ 5, 6, 7 ],
           [ 3, 6, 8, 9 ],
           [ 5, 7, 8, 10, 11 ]
         ]
       ],
       cp::back(2) << cp::both_ends(1) << cp::back(2) << vec2 => [
         ...,
         [
           [ 2, 6 ]
         ],
         [
           [ ..., 6, 7 ],
           ...
         ]
       ]
[dump] vec2 => [
         [
           [ 1 ]
         ],
         [
           [ 2, 6 ]
         ],
         [
           [ 5, 6, 7 ],
           [ 3, 6, 8, 9 ],
           [ 5, 7, 8, 10, 11 ]
         ]
       ],
       cp::both_ends(2) << cp::both_ends(2) << cp::both_ends(2) << vec2 => [
         [
           [ 1 ]
         ],
         ...,
         [
           [ 5, ..., 7 ],
           ...,
           [ 5, ..., 11 ]
         ]
       ]
[dump] multimap1 => {
         'a' (4): [ 10, 40, 12, 44 ],
         'b' (2): [ 20, 23 ],
         'c' (2): [ 30, 31 ]
       },
       cp::both_ends(2) << cp::both_ends(2) << multimap1 => {
         'a' (4): [ 10, ..., 44 ],
         ...,
         'c' (2): [ 30, 31 ]
       }
[dump] multiset1 => { 1 (2), 3 (1), 4 (1) }, cp::middle(1) << cp::back(1) << multiset1 => { ..., 3 (1), ... }
[dump] cp::front(2) << cp::map_kv(cp::back(2), cp::front(2)) << multimap2 => {
         [ ..., 4, 2 ] (3): [
           [ 11, 22, 11, 22 ],
           [ 14, 21, 11, 22 ],
           ...
         ],
         [ ..., 4, 0 ] (1): [
           [ 21, 5, 2, -5 ]
         ],
         ...
       }
[dump] cp::int_style(12, 3, 3) << cp::front(2) << cp::int_style(2, 0, 0) << cp::map_kv(cp::int_style(16, 3, 3) << cp::back(2), cp::front(2)) << multimap2 => {
         [ ..., 004 _16, 002 _16 ] (3): [
           [ 1011 _2, 10110 _2, 1011 _2, 10110 _2 ],
           [ 1110 _2, 10101 _2, 1011 _2, 10110 _2 ],
           ...
         ],
         [ ..., 004 _16, 000 _16 ] (1): [
           [ 10101 _2, 101 _2, 10 _2, -101 _2 ]
         ],
         ...
       }
[dump] multimap2 | cp::front(2) | cp::map_kv(cp::int_style(16, 3, 3) | cp::back(2), cp::front(2)) | cp::int_style(12, 3, 3) | cp::int_style(2, 0, 0) => {
         [ ..., 004 _16, 002 _16 ] (3): [
           [ 1011 _2, 10110 _2, 1011 _2, 10110 _2 ],
           [ 1110 _2, 10101 _2, 1011 _2, 10110 _2 ],
           ...
         ],
         [ ..., 004 _16, 000 _16 ] (1): [
           [ 10101 _2, 101 _2, 10 _2, -101 _2 ]
         ],
         ...
       }
[dump] cp::int_style(12, 3, 3) << cp::int_style(8, 3, 3) << cp::map_kv(cp::int_style(16, 3, 3) << cp::back(2), cp::front(2)) << multimap2 => {
         [ 001 _8, 002 _8, 004 _8, 002 _8 ] (3): [
           [ 013 _8, 026 _8, 013 _8, 026 _8 ],
           [ 016 _8, 025 _8, 013 _8, 026 _8 ],
           [ 000 _8, 005 _8, 031 _8 ]
         ],
         [ 003 _8, 004 _8, 000 _8 ] (1): [
           [ 025 _8, 005 _8, 002 _8, -005 _8 ]
         ],
         [ 005 _8, 006 _8, 007 _8, 010 _8 ] (1): [
           [ 016 _8, -002 _8 ]
         ]
       }
[dump] multimap2 | cp::map_kv(cp::int_style(16, 3, 3) | cp::back(2), cp::front(2)) | cp::int_style(12, 3, 3) | cp::int_style(8, 3, 3) => {
         [ 001 _8, 002 _8, 004 _8, 002 _8 ] (3): [
           [ 013 _8, 026 _8, 013 _8, 026 _8 ],
           [ 016 _8, 025 _8, 013 _8, 026 _8 ],
           [ 000 _8, 005 _8, 031 _8 ]
         ],
         [ 003 _8, 004 _8, 000 _8 ] (1): [
           [ 025 _8, 005 _8, 002 _8, -005 _8 ]
         ],
         [ 005 _8, 006 _8, 007 _8, 010 _8 ] (1): [
           [ 016 _8, -002 _8 ]
         ]
       }
[dump] cp::front(1) << cp::map_v( cp::int_style(8, 3, 3) << cp::middle(1) << cp::int_style(16, 3, 3) << cp::middle(2) << cp::int_style(5, 3, 3) ) << multimap2
         => {
           [ 1, 2, 4, 2 ] (3): [
             ...,
             [ ..., 015 _16, 00b _16, ... ],
             ...
           ],
           ...
         }
[dump] multimap2 | cp::front(1) | cp::map_v( cp::int_style(8, 3, 3) | cp::middle(1) | cp::int_style(16, 3, 3) | cp::middle(2) | cp::int_style(5, 3, 3) ) => {
         [ 1, 2, 4, 2 ] (3): [
           ...,
           [ ..., 015 _16, 00b _16, ... ],
           ...
         ],
         ...
       }
[dump] i => 0, cp::int_style(i) << 0x10000 => 65536
[dump] i => 1, cp::int_style(i) << 0x10000 => 65536
[dump] i => 2, cp::int_style(i) << 0x10000 => 1 00 00 00 00 00 00 00 00 _2
[dump] i => 3, cp::int_style(i) << 0x10000 => 65536
[dump] i => 4, cp::int_style(i) << 0x10000 => 65536
[dump] i => 5, cp::int_style(i) << 0x10000 => 65536
[dump] i => 6, cp::int_style(i) << 0x10000 => 65536
[dump] i => 7, cp::int_style(i) << 0x10000 => 65536
[dump] i => 8, cp::int_style(i) << 0x10000 => 00 20 00 00 _8
[dump] i => 9, cp::int_style(i) << 0x10000 => 65536
[dump] i => 10, cp::int_style(i) << 0x10000 => 00 06 55 36
[dump] i => 11, cp::int_style(i) << 0x10000 => 65536
[dump] i => 12, cp::int_style(i) << 0x10000 => 65536
[dump] i => 13, cp::int_style(i) << 0x10000 => 65536
[dump] i => 14, cp::int_style(i) << 0x10000 => 65536
[dump] i => 15, cp::int_style(i) << 0x10000 => 65536
[dump] i => 16, cp::int_style(i) << 0x10000 => 00 01 00 00 _16
[dump] vec3 => [
         [ 1, 20, 4 ],
         [ -2, 0, -10 ]
       ],
       cp::int_style(10, 2, 0, false, true) << vec3 => [
         [  01,  20,  04 ],
         [ -02,  00, -10 ]
       ],
       cp::dec(2) << vec3 => [
         [  1, 20,  4 ],
         [ -2,  0, -10 ]
       ]
[dump] 0000 0001
[dump]  0000 0002
[dump] -0000 0003
[dump]         1
[dump]          2
[dump]         -3
[dump] 0 0000 0004
[dump]  0 0000 0005
[dump] -0 0000 0006
[dump]           4
[dump]            5
[dump]           -6
[dump] 000 0007
[dump]  000 0008
[dump] -000 0009
[dump]        7
[dump]         8
[dump]        -9
[dump] 1
[dump]  2
[dump] -3
[dump] 1
[dump]  2
[dump] -3
[dump] 004
[dump]  005
[dump] -006
[dump]   4
[dump]    5
[dump]   -6
[dump] 0007
[dump]  0008
[dump] -0009
[dump]    7
[dump]     8
[dump]    -9
[dump] 0 0000
[dump]  0 0001
[dump] -0 0002
[dump]      0
[dump]       1
[dump]      -2
[dump] 1 0000
[dump]  2 0000
[dump] -3 0000
[dump]   4000
[dump]    5000
[dump]  - 6000
[dump]    700
[dump]     800
[dump]    -900
[dump] 1 0000
[dump] 2 0000
[dump] -3 0000
[dump] 4000
[dump] 5000
[dump] -6000
[dump] 700
[dump] 800
[dump] -900
[dump] 10
[dump]  20
[dump] -30
[dump]  4
[dump]   5
[dump]  -6
[dump] 83 _16
[dump] 84 _16
[dump] -74 _16
[dump] -85 _16
[dump] 86 _16
[dump]  87 _16
[dump] -77 _16
[dump]  88 _16
[dump]   89 _16
[dump]    8a _16
[dump]  - 7a _16
[dump]  0 8b _16
[dump]    8c _16
[dump]     8d _16
[dump]   - 7d _16
[dump]  00 8e _16
[dump]      8f _16
[dump]       80 _16
[dump]     - 71 _16
[dump]  0 00 82 _16
[dump] 0 0000
[dump]      0
[dump] 0 0000 _16
[dump]      0 _16
[dump]  0 0000
[dump]       0
[dump]  0 0000 _16
[dump]       0 _16
[dump] 00000
[dump]     0
[dump] 00000 _16
[dump]     0 _16
[dump]  00000
[dump]      0
[dump]  00000 _16
[dump]      0 _16
[dump] -1
[dump] -1
[dump] -10
[dump] - 10
[dump] -1 00
[dump] -1 00
[dump] 0000000000000000000000000000000000000000000000000000000000000000 _2
[dump] 0000000000000000000000000000000000000000000000000000000000000001 _2
[dump] 0000000000000000000000000000000000000000000000000000000000000001 _2
[dump] 0000000000000000000000000000000000000000000000000000000000000010 _2
[dump] 0000000000000000000000000000000000000000000000000000000000000011 _2
[dump] 0000000000000000000000000000000000000000000000000000000000000100 _2
[dump] 0000000000000000000000000000000000000000000000000000000000000111 _2
[dump] 0000000000000000000000000000000000000000000000000000000000001000 _2
[dump] 0000000000000000000000000000000000000000000000000000000000001111 _2
[dump] 0000000000000000000000000000000000000000000000000000000000010000 _2
[dump] 0000000000000000000000000000000000000000000000000000000000011111 _2
[dump] 0000000000000000000000000000000000000000000000000000000000100000 _2
[dump] 0000000000000000000000000000000000000000000000000000000000111111 _2
[dump] 0000000000000000000000000000000000000000000000000000000001000000 _2
[dump] 0000000000000000000000000000000000000000000000000000000001111111 _2
[dump] 0000000000000000000000000000000000000000000000000000000010000000 _2
[dump] 0000000000000000000000000000000000000000000000000000000011111111 _2
[dump] 0000000000000000000000000000000000000000000000000000000100000000 _2
[dump] 0000000000000000000000000000000000000000000000000000000111111111 _2
[dump] 0000000000000000000000000000000000000000000000000000001000000000 _2
[dump] 0000000000000000000000000000000000000000000000000000001111111111 _2
[dump] 0000000000000000000000000000000000000000000000000000010000000000 _2
[dump] 0000000000000000000000000000000000000000000000000000011111111111 _2
[dump] 0000000000000000000000000000000000000000000000000000100000000000 _2
[dump] 0000000000000000000000000000000000000000000000000000111111111111 _2
[dump] 0000000000000000000000000000000000000000000000000001000000000000 _2
[dump] 0000000000000000000000000000000000000000000000000001111111111111 _2
[dump] 0000000000000000000000000000000000000000000000000010000000000000 _2
[dump] 0000000000000000000000000000000000000000000000000011111111111111 _2
[dump] 0000000000000000000000000000000000000000000000000100000000000000 _2
[dump] 0000000000000000000000000000000000000000000000000111111111111111 _2
[dump] 0000000000000000000000000000000000000000000000001000000000000000 _2
[dump] 0000000000000000000000000000000000000000000000001111111111111111 _2
[dump] 0000000000000000000000000000000000000000000000010000000000000000 _2
[dump] 0000000000000000000000000000000000000000000000011111111111111111 _2
[dump] 0000000000000000000000000000000000000000000000100000000000000000 _2
[dump] 0000000000000000000000000000000000000000000000111111111111111111 _2
[dump] 0000000000000000000000000000000000000000000001000000000000000000 _2
[dump] 0000000000000000000000000000000000000000000001111111111111111111 _2
[dump] 0000000000000000000000000000000000000000000010000000000000000000 _2
[dump] 0000000000000000000000000000000000000000000011111111111111111111 _2
[dump] 0000000000000000000000000000000000000000000100000000000000000000 _2
[dump] 0000000000000000000000000000000000000000000111111111111111111111 _2
[dump] 0000000000000000000000000000000000000000001000000000000000000000 _2
[dump] 0000000000000000000000000000000000000000001111111111111111111111 _2
[dump] 0000000000000000000000000000000000000000010000000000000000000000 _2
[dump] 0000000000000000000000000000000000000000011111111111111111111111 _2
[dump] 0000000000000000000000000000000000000000100000000000000000000000 _2
[dump] 0000000000000000000000000000000000000000111111111111111111111111 _2
[dump] 0000000000000000000000000000000000000001000000000000000000000000 _2
[dump] 0000000000000000000000000000000000000001111111111111111111111111 _2
[dump] 0000000000000000000000000000000000000010000000000000000000000000 _2
[dump] 0000000000000000000000000000000000000011111111111111111111111111 _2
[dump] 0000000000000000000000000000000000000100000000000000000000000000 _2
[dump] 0000000000000000000000000000000000000111111111111111111111111111 _2
[dump] 0000000000000000000000000000000000001000000000000000000000000000 _2
[dump] 0000000000000000000000000000000000001111111111111111111111111111 _2
[dump] 0000000000000000000000000000000000010000000000000000000000000000 _2
[dump] 0000000000000000000000000000000000011111111111111111111111111111 _2
[dump] 0000000000000000000000000000000000100000000000000000000000000000 _2
[dump] 0000000000000000000000000000000000111111111111111111111111111111 _2
[dump] 0000000000000000000000000000000001000000000000000000000000000000 _2
[dump] 0000000000000000000000000000000001111111111111111111111111111111 _2
[dump] 0000000000000000000000000000000010000000000000000000000000000000 _2
[dump] 0000000000000000000000000000000011111111111111111111111111111111 _2
[dump] 0000000000000000000000000000000100000000000000000000000000000000 _2
[dump] 0000000000000000000000000000000111111111111111111111111111111111 _2
[dump] 0000000000000000000000000000001000000000000000000000000000000000 _2
[dump] 0000000000000000000000000000001111111111111111111111111111111111 _2
[dump] 0000000000000000000000000000010000000000000000000000000000000000 _2
[dump] 0000000000000000000000000000011111111111111111111111111111111111 _2
[dump] 0000000000000000000000000000100000000000000000000000000000000000 _2
[dump] 0000000000000000000000000000111111111111111111111111111111111111 _2
[dump] 0000000000000000000000000001000000000000000000000000000000000000 _2
[dump] 0000000000000000000000000001111111111111111111111111111111111111 _2
[dump] 0000000000000000000000000010000000000000000000000000000000000000 _2
[dump] 0000000000000000000000000011111111111111111111111111111111111111 _2
[dump] 0000000000000000000000000100000000000000000000000000000000000000 _2
[dump] 0000000000000000000000000111111111111111111111111111111111111111 _2
[dump] 0000000000000000000000001000000000000000000000000000000000000000 _2
[dump] 0000000000000000000000001111111111111111111111111111111111111111 _2
[dump] 0000000000000000000000010000000000000000000000000000000000000000 _2
[dump] 0000000000000000000000011111111111111111111111111111111111111111 _2
[dump] 0000000000000000000000100000000000000000000000000000000000000000 _2
[dump] 0000000000000000000000111111111111111111111111111111111111111111 _2
[dump] 0000000000000000000001000000000000000000000000000000000000000000 _2
[dump] 0000000000000000000001111111111111111111111111111111111111111111 _2
[dump] 0000000000000000000010000000000000000000000000000000000000000000 _2
[dump] 0000000000000000000011111111111111111111111111111111111111111111 _2
[dump] 0000000000000000000100000000000000000000000000000000000000000000 _2
[dump] 0000000000000000000111111111111111111111111111111111111111111111 _2
[dump] 0000000000000000001000000000000000000000000000000000000000000000 _2
[dump] 0000000000000000001111111111111111111111111111111111111111111111 _2
[dump] 0000000000000000010000000000000000000000000000000000000000000000 _2
[dump] 0000000000000000011111111111111111111111111111111111111111111111 _2
[dump] 0000000000000000100000000000000000000000000000000000000000000000 _2
[dump] 0000000000000000111111111111111111111111111111111111111111111111 _2
[dump] 0000000000000001000000000000000000000000000000000000000000000000 _2
[dump] 0000000000000001111111111111111111111111111111111111111111111111 _2
[dump] 0000000000000010000000000000000000000000000000000000000000000000 _2
[dump] 0000000000000011111111111111111111111111111111111111111111111111 _2
[dump] 0000000000000100000000000000000000000000000000000000000000000000 _2
[dump] 0000000000000111111111111111111111111111111111111111111111111111 _2
[dump] 0000000000001000000000000000000000000000000000000000000000000000 _2
[dump] 0000000000001111111111111111111111111111111111111111111111111111 _2
[dump] 0000000000010000000000000000000000000000000000000000000000000000 _2
[dump] 0000000000011111111111111111111111111111111111111111111111111111 _2
[dump] 0000000000100000000000000000000000000000000000000000000000000000 _2
[dump] 0000000000111111111111111111111111111111111111111111111111111111 _2
[dump] 0000000001000000000000000000000000000000000000000000000000000000 _2
[dump] 0000000001111111111111111111111111111111111111111111111111111111 _2
[dump] 0000000010000000000000000000000000000000000000000000000000000000 _2
[dump] 0000000011111111111111111111111111111111111111111111111111111111 _2
[dump] 0000000100000000000000000000000000000000000000000000000000000000 _2
[dump] 0000000111111111111111111111111111111111111111111111111111111111 _2
[dump] 0000001000000000000000000000000000000000000000000000000000000000 _2
[dump] 0000001111111111111111111111111111111111111111111111111111111111 _2
[dump] 0000010000000000000000000000000000000000000000000000000000000000 _2
[dump] 0000011111111111111111111111111111111111111111111111111111111111 _2
[dump] 0000100000000000000000000000000000000000000000000000000000000000 _2
[dump] 0000111111111111111111111111111111111111111111111111111111111111 _2
[dump] 0001000000000000000000000000000000000000000000000000000000000000 _2
[dump] 0001111111111111111111111111111111111111111111111111111111111111 _2
[dump] 0010000000000000000000000000000000000000000000000000000000000000 _2
[dump] 0011111111111111111111111111111111111111111111111111111111111111 _2
[dump] 0100000000000000000000000000000000000000000000000000000000000000 _2
[dump] 0111111111111111111111111111111111111111111111111111111111111111 _2
[dump] 1000000000000000000000000000000000000000000000000000000000000000 _2
CHAR_MAX, CHAR_MIN, UCHAR_MAX
[dump]  00000000000000000000000001111111 _2,  00000000177 _8,  0000007f _16,         127
[dump] -00000000000000000000000010000000 _2, -00000000200 _8, -00000080 _16,        -128
[dump]  00000000000000000000000011111111 _2,  00000000377 _8,  000000ff _16,         255
SHRT_MAX, SHRT_MIN, USHRT_MAX
[dump]  00000000000000000111111111111111 _2,  00000077777 _8,  00007fff _16,       32767
[dump] -00000000000000001000000000000000 _2, -00000100000 _8, -00008000 _16,      -32768
[dump]  00000000000000001111111111111111 _2,  00000177777 _8,  0000ffff _16,       65535
INT_MAX, INT_MIN, UINT_MAX
[dump]  01111111111111111111111111111111 _2,  17777777777 _8,  7fffffff _16,  2147483647
[dump] -10000000000000000000000000000000 _2, -20000000000 _8, -80000000 _16, -2147483648
[dump]  11111111111111111111111111111111 _2,  37777777777 _8,  ffffffff _16,  4294967295
LLONG_MAX, LLONG_MIN, ULLONG_MAX
[dump]  0111111111111111111111111111111111111111111111111111111111111111 _2,  0777777777777777777777 _8,  7fffffffffffffff _16,   9223372036854775807
[dump] -1000000000000000000000000000000000000000000000000000000000000000 _2, -1000000000000000000000 _8, -8000000000000000 _16,  -9223372036854775808
[dump]  1111111111111111111111111111111111111111111111111111111111111111 _2,  1777777777777777777777 _8,  ffffffffffffffff _16,  18446744073709551615
[dump] vec4 | cp::index() => [
         0: [ 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8 ],
         1: [ 0: 9, 1: 10, 2: 11, 3: 12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: 16 ],
         4: [ 0: 17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec4 | cp::front(3) | cp::index() => [
         0: [ 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8 ],
         1: [ 0: 9, 1: 10, 2: 11, 3: 12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         ...
       ]
[dump] vec4 | cp::back(3) | cp::index() => [
         ...,
         3: [ 0: 15, 1: 16 ],
         4: [ 0: 17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec4 | cp::middle(3) | cp::index() => [
         ...,
         1: [ 0: 9, 1: 10, 2: 11, 3: 12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: 16 ],
         ...
       ]
[dump] vec4 | cp::both_ends(3) | cp::index() => [
         0: [ 0: 1, 1: 2, 2: 3, 3: 4, 4: 5, 5: 6, 6: 7, 7: 8 ],
         1: [ 0: 9, 1: 10, 2: 11, 3: 12, 4: 13 ],
         ...,
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec4 | cp::front() | cp::front(3) | cp::index() => [
         0: [ 0: 1, 1: 2, 2: 3, ... ],
         1: [ 0: 9, 1: 10, 2: 11, ... ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: 16 ],
         4: [ 0: 17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec4 | cp::front() | cp::back(3) | cp::index() => [
         0: [ ..., 5: 6, 6: 7, 7: 8 ],
         1: [ ..., 2: 11, 3: 12, 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: 16 ],
         4: [ 0: 17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec4 | cp::front() | cp::middle(3) | cp::index() => [
         0: [ ..., 2: 3, 3: 4, 4: 5, ... ],
         1: [ ..., 1: 10, 2: 11, 3: 12, ... ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: 16 ],
         4: [ 0: 17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] vec4 | cp::front() | cp::both_ends(3) | cp::index() => [
         0: [ 0: 1, 1: 2, ..., 7: 8 ],
         1: [ 0: 9, 1: 10, ..., 4: 13 ],
         2: [ 0: 14, 1: 15 ],
         3: [ 0: 15, 1: 16 ],
         4: [ 0: 17, 1: 18 ],
         5: [ 0: 19, 1: 20 ]
       ]
[dump] cp::front(2) << cp::middle(1) << cp::back(2) << cp::both_ends(1) << non_copyable_and_non_movable_class1 => non_copyable_and_non_movable_class{ 
         str_member= "This object has a pointer and reference_wrapper to itself.", 
         pointer= *non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ ... }
         }, 
         ref= non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ ... }
         }
       }
[dump] non_copyable_and_non_movable_class_container1 => [
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ ... }
         },
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ ... }
         }
       ]
[dump] cp::front(1) << non_copyable_and_non_movable_class_container1 => [
         non_copyable_and_non_movable_class{ 
           str_member= "This is non_copyable_and_non_movable_class.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ ... }
         },
         ...
       ]
[dump] tuple_of_non_copyable_and_non_movable_class1 => (
         non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ ... }
         },
         non_copyable_and_non_movable_class{ 
           str_member= "This object has a pointer and reference_wrapper to itself.", 
           pointer= *non_copyable_and_non_movable_class{ ... }, 
           ref= non_copyable_and_non_movable_class{ ... }
         }
       )
[dump] container_of_non_copyable_non_const_iterator1
         => [ "This iterator is non-copyable and doesn't support const.", "This iterator is non-copyable and doesn't support const." ]
[dump] unsupported_container_of_supported_container_a1 => Unsupported Type
[dump] unsupported_container_of_supported_container_b1 => Unsupported Type
[dump] unsupported_non_const_class1 => Unsupported Type
